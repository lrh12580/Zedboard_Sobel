// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module addWeighted (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_x_V_V_dout,
        src_x_V_V_empty_n,
        src_x_V_V_read,
        src_y_V_V_dout,
        src_y_V_V_empty_n,
        src_y_V_V_read,
        dst_V_V_din,
        dst_V_V_full_n,
        dst_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state23 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_x_V_V_dout;
input   src_x_V_V_empty_n;
output   src_x_V_V_read;
input  [7:0] src_y_V_V_dout;
input   src_y_V_V_empty_n;
output   src_y_V_V_read;
output  [7:0] dst_V_V_din;
input   dst_V_V_full_n;
output   dst_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_x_V_V_read;
reg src_y_V_V_read;
reg dst_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_x_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_297;
reg    src_y_V_V_blk_n;
reg    dst_V_V_blk_n;
reg    ap_enable_reg_pp0_iter20;
reg   [0:0] ap_reg_pp0_iter19_exitcond_reg_297;
reg   [18:0] i_reg_127;
wire   [0:0] exitcond_fu_158_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
reg    ap_block_state22_pp0_stage0_iter20;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter5_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter6_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter7_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter8_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter9_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter10_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter11_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter12_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter13_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter14_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter15_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter16_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter17_exitcond_reg_297;
reg   [0:0] ap_reg_pp0_iter18_exitcond_reg_297;
wire   [18:0] i_4_fu_164_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_V_7_reg_306;
reg   [7:0] tmp_V_8_reg_311;
wire   [63:0] grp_fu_152_p1;
reg   [63:0] tmp_s_reg_326;
wire   [63:0] grp_fu_155_p1;
reg   [63:0] tmp_36_reg_331;
wire   [63:0] grp_fu_142_p2;
reg   [63:0] tmp_34_reg_336;
wire   [63:0] grp_fu_147_p2;
reg   [63:0] tmp_37_reg_341;
reg   [10:0] loc_V_reg_346;
wire   [51:0] loc_V_2_fu_192_p1;
reg   [51:0] loc_V_2_reg_352;
wire   [7:0] p_Val2_8_fu_289_p3;
reg   [7:0] p_Val2_8_reg_357;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_152_p0;
wire   [31:0] grp_fu_155_p0;
wire   [63:0] grp_fu_138_p2;
wire   [63:0] p_Val2_s_fu_178_p1;
wire   [53:0] tmp_i_i_i_fu_196_p4;
wire   [11:0] tmp_i_i_i_i_cast_fu_209_p1;
wire   [11:0] sh_assign_fu_212_p2;
wire   [10:0] tmp_32_i_i_i_fu_226_p2;
wire   [0:0] isNeg_fu_218_p3;
wire  signed [11:0] tmp_32_i_i_i_cast_fu_231_p1;
wire   [11:0] sh_assign_3_fu_235_p3;
wire  signed [31:0] sh_assign_3_i_i_i_ca_fu_243_p1;
wire   [53:0] tmp_33_i_i_i_cast_fu_251_p1;
wire   [112:0] tmp_i_i_i_cast_fu_205_p1;
wire   [112:0] tmp_33_i_i_i_fu_247_p1;
wire   [53:0] tmp_34_i_i_i_fu_255_p2;
wire   [0:0] tmp_47_fu_267_p3;
wire   [112:0] tmp_35_i_i_i_fu_261_p2;
wire   [7:0] tmp_38_fu_275_p1;
wire   [7:0] tmp_39_fu_279_p4;
reg    grp_fu_138_ce;
reg    grp_fu_142_ce;
reg    grp_fu_147_ce;
reg    grp_fu_152_ce;
reg    grp_fu_155_ce;
wire    ap_CS_fsm_state23;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

image_filter_daddcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
image_filter_daddcud_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_34_reg_336),
    .din1(tmp_37_reg_341),
    .ce(grp_fu_138_ce),
    .dout(grp_fu_138_p2)
);

image_filter_dmuldEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
image_filter_dmuldEe_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_326),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_142_ce),
    .dout(grp_fu_142_p2)
);

image_filter_dmuldEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
image_filter_dmuldEe_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_36_reg_331),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_147_ce),
    .dout(grp_fu_147_p2)
);

image_filter_sitoeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
image_filter_sitoeOg_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_152_p0),
    .ce(grp_fu_152_ce),
    .dout(grp_fu_152_p1)
);

image_filter_sitoeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
image_filter_sitoeOg_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .ce(grp_fu_155_ce),
    .dout(grp_fu_155_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter20 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_127 <= i_4_fu_164_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_127 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_reg_297 <= ap_reg_pp0_iter9_exitcond_reg_297;
        ap_reg_pp0_iter11_exitcond_reg_297 <= ap_reg_pp0_iter10_exitcond_reg_297;
        ap_reg_pp0_iter12_exitcond_reg_297 <= ap_reg_pp0_iter11_exitcond_reg_297;
        ap_reg_pp0_iter13_exitcond_reg_297 <= ap_reg_pp0_iter12_exitcond_reg_297;
        ap_reg_pp0_iter14_exitcond_reg_297 <= ap_reg_pp0_iter13_exitcond_reg_297;
        ap_reg_pp0_iter15_exitcond_reg_297 <= ap_reg_pp0_iter14_exitcond_reg_297;
        ap_reg_pp0_iter16_exitcond_reg_297 <= ap_reg_pp0_iter15_exitcond_reg_297;
        ap_reg_pp0_iter17_exitcond_reg_297 <= ap_reg_pp0_iter16_exitcond_reg_297;
        ap_reg_pp0_iter18_exitcond_reg_297 <= ap_reg_pp0_iter17_exitcond_reg_297;
        ap_reg_pp0_iter19_exitcond_reg_297 <= ap_reg_pp0_iter18_exitcond_reg_297;
        ap_reg_pp0_iter2_exitcond_reg_297 <= ap_reg_pp0_iter1_exitcond_reg_297;
        ap_reg_pp0_iter3_exitcond_reg_297 <= ap_reg_pp0_iter2_exitcond_reg_297;
        ap_reg_pp0_iter4_exitcond_reg_297 <= ap_reg_pp0_iter3_exitcond_reg_297;
        ap_reg_pp0_iter5_exitcond_reg_297 <= ap_reg_pp0_iter4_exitcond_reg_297;
        ap_reg_pp0_iter6_exitcond_reg_297 <= ap_reg_pp0_iter5_exitcond_reg_297;
        ap_reg_pp0_iter7_exitcond_reg_297 <= ap_reg_pp0_iter6_exitcond_reg_297;
        ap_reg_pp0_iter8_exitcond_reg_297 <= ap_reg_pp0_iter7_exitcond_reg_297;
        ap_reg_pp0_iter9_exitcond_reg_297 <= ap_reg_pp0_iter8_exitcond_reg_297;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_reg_297 <= exitcond_reg_297;
        exitcond_reg_297 <= exitcond_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter17_exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loc_V_2_reg_352 <= loc_V_2_fu_192_p1;
        loc_V_reg_346 <= {{p_Val2_s_fu_178_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter18_exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_8_reg_357 <= p_Val2_8_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter12_exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_34_reg_336 <= grp_fu_142_p2;
        tmp_37_reg_341 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter6_exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_36_reg_331 <= grp_fu_155_p1;
        tmp_s_reg_326 <= grp_fu_152_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_297 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_7_reg_306 <= src_x_V_V_dout;
        tmp_V_8_reg_311 <= src_y_V_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_fu_158_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter19_exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        dst_V_V_blk_n = dst_V_V_full_n;
    end else begin
        dst_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter19_exitcond_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_V_V_write = 1'b1;
    end else begin
        dst_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_138_ce = 1'b1;
    end else begin
        grp_fu_138_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_142_ce = 1'b1;
    end else begin
        grp_fu_142_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_147_ce = 1'b1;
    end else begin
        grp_fu_147_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_152_ce = 1'b1;
    end else begin
        grp_fu_152_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_155_ce = 1'b1;
    end else begin
        grp_fu_155_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_x_V_V_blk_n = src_x_V_V_empty_n;
    end else begin
        src_x_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_x_V_V_read = 1'b1;
    end else begin
        src_x_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_y_V_V_blk_n = src_y_V_V_empty_n;
    end else begin
        src_y_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_y_V_V_read = 1'b1;
    end else begin
        src_y_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((exitcond_fu_158_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter19_exitcond_reg_297 == 1'd0) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_297 == 1'd0) & (src_y_V_V_empty_n == 1'b0)) | ((exitcond_reg_297 == 1'd0) & (src_x_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter19_exitcond_reg_297 == 1'd0) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_297 == 1'd0) & (src_y_V_V_empty_n == 1'b0)) | ((exitcond_reg_297 == 1'd0) & (src_x_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter19_exitcond_reg_297 == 1'd0) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_297 == 1'd0) & (src_y_V_V_empty_n == 1'b0)) | ((exitcond_reg_297 == 1'd0) & (src_x_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp0_stage0_iter20 = ((ap_reg_pp0_iter19_exitcond_reg_297 == 1'd0) & (dst_V_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_reg_297 == 1'd0) & (src_y_V_V_empty_n == 1'b0)) | ((exitcond_reg_297 == 1'd0) & (src_x_V_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dst_V_V_din = p_Val2_8_reg_357;

assign exitcond_fu_158_p2 = ((i_reg_127 == 19'd262144) ? 1'b1 : 1'b0);

assign grp_fu_152_p0 = tmp_V_7_reg_306;

assign grp_fu_155_p0 = tmp_V_8_reg_311;

assign i_4_fu_164_p2 = (i_reg_127 + 19'd1);

assign isNeg_fu_218_p3 = sh_assign_fu_212_p2[32'd11];

assign loc_V_2_fu_192_p1 = p_Val2_s_fu_178_p1[51:0];

assign p_Val2_8_fu_289_p3 = ((isNeg_fu_218_p3[0:0] === 1'b1) ? tmp_38_fu_275_p1 : tmp_39_fu_279_p4);

assign p_Val2_s_fu_178_p1 = grp_fu_138_p2;

assign sh_assign_3_fu_235_p3 = ((isNeg_fu_218_p3[0:0] === 1'b1) ? tmp_32_i_i_i_cast_fu_231_p1 : sh_assign_fu_212_p2);

assign sh_assign_3_i_i_i_ca_fu_243_p1 = $signed(sh_assign_3_fu_235_p3);

assign sh_assign_fu_212_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast_fu_209_p1));

assign start_out = real_start;

assign tmp_32_i_i_i_cast_fu_231_p1 = $signed(tmp_32_i_i_i_fu_226_p2);

assign tmp_32_i_i_i_fu_226_p2 = (11'd1023 - loc_V_reg_346);

assign tmp_33_i_i_i_cast_fu_251_p1 = $unsigned(sh_assign_3_i_i_i_ca_fu_243_p1);

assign tmp_33_i_i_i_fu_247_p1 = $unsigned(sh_assign_3_i_i_i_ca_fu_243_p1);

assign tmp_34_i_i_i_fu_255_p2 = tmp_i_i_i_fu_196_p4 >> tmp_33_i_i_i_cast_fu_251_p1;

assign tmp_35_i_i_i_fu_261_p2 = tmp_i_i_i_cast_fu_205_p1 << tmp_33_i_i_i_fu_247_p1;

assign tmp_38_fu_275_p1 = tmp_47_fu_267_p3;

assign tmp_39_fu_279_p4 = {{tmp_35_i_i_i_fu_261_p2[60:53]}};

assign tmp_47_fu_267_p3 = tmp_34_i_i_i_fu_255_p2[32'd53];

assign tmp_i_i_i_cast_fu_205_p1 = tmp_i_i_i_fu_196_p4;

assign tmp_i_i_i_fu_196_p4 = {{{{1'd1}, {loc_V_2_reg_352}}}, {1'd0}};

assign tmp_i_i_i_i_cast_fu_209_p1 = loc_V_reg_346;

endmodule //addWeighted
