-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussianBlur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_V_V_empty_n : IN STD_LOGIC;
    src_V_V_read : OUT STD_LOGIC;
    dst_x_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_x_V_V_full_n : IN STD_LOGIC;
    dst_x_V_V_write : OUT STD_LOGIC;
    dst_y_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_y_V_V_full_n : IN STD_LOGIC;
    dst_y_V_V_write : OUT STD_LOGIC );
end;


architecture behav of gaussianBlur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv19_40001 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv19_201 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_201 : STD_LOGIC_VECTOR (9 downto 0) := "1000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_25 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100101";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond3_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_x_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_23_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_23_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_y_V_V_blk_n : STD_LOGIC;
    signal col_assign_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal countWait_reg_319 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond2_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond3_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_846 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_V_ad_reg_851 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ad_reg_856 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_118_0_1_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_0_1_reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_0_2_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_0_2_reg_897 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxCol_1_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_486_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal phitmp_reg_938 : STD_LOGIC_VECTOR (18 downto 0);
    signal lineBuff_val_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_V_lo_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal lineBuff_val_0_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_V_lo_5_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_lo_3_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_lo_4_reg_966 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_6_reg_976 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_7_reg_982 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_701_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_reg_993 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp3_fu_707_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_reg_998 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_825_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_reg_1003 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_fu_713_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_reg_1008 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_x_V_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal countWait_4_fu_819_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal lineBuff_val_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_V_ce0 : STD_LOGIC;
    signal lineBuff_val_0_V_we0 : STD_LOGIC;
    signal lineBuff_val_0_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_V_ce1 : STD_LOGIC;
    signal lineBuff_val_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_V_ce0 : STD_LOGIC;
    signal lineBuff_val_1_V_we0 : STD_LOGIC;
    signal lineBuff_val_1_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_V_ce1 : STD_LOGIC;
    signal lineBuff_val_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ce0 : STD_LOGIC;
    signal lineBuff_val_2_V_we0 : STD_LOGIC;
    signal lineBuff_val_2_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ce1 : STD_LOGIC;
    signal i_reg_274 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_phi_mux_col_assign_phi_fu_289_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_idxRow_phi_fu_300_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_pixConvolved_phi_fu_311_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_countWait_phi_fu_323_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal countWait_1_reg_331 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_20_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_805_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_39_fu_366_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_40_fu_382_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_4_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_5_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_7_0_2_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_492_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_22_fu_503_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_499_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_fu_510_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_520_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_fu_532_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_fu_528_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_fu_540_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_fu_550_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_28_fu_561_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_fu_557_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_568_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_fu_578_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_30_fu_589_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_fu_585_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl8_fu_596_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_fu_609_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_fu_621_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_fu_617_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl10_fu_629_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_1_2_fu_633_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_643_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_36_fu_654_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl13_fu_650_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl14_fu_661_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_37_fu_671_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_fu_683_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_679_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl15_fu_691_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_fu_514_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_0_1_fu_544_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_0_2_fu_572_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_1_fu_600_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_2_1_fu_665_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_2_2_fu_695_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_fu_719_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_34_fu_730_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl11_fu_726_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl12_fu_737_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal val_V_3_2_fu_741_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_cast_fu_754_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_cast_fu_751_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp1_fu_757_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_cast_fu_770_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal val_V_3_2_cast_fu_747_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp6_fu_773_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp6_cast_fu_779_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_cast_fu_767_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_783_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_cast_fu_763_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal accumulator_V_2_2_fu_789_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_825_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_825_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_825_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_825_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_825_p20 : STD_LOGIC_VECTOR (14 downto 0);

    component image_filter_mac_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component gaussianBlur_linefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lineBuff_val_0_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_0_V_address0,
        ce0 => lineBuff_val_0_V_ce0,
        we0 => lineBuff_val_0_V_we0,
        d0 => lineBuff_val_1_V_q0,
        q0 => lineBuff_val_0_V_q0,
        address1 => lineBuff_val_0_V_address1,
        ce1 => lineBuff_val_0_V_ce1,
        q1 => lineBuff_val_0_V_q1);

    lineBuff_val_1_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_1_V_address0,
        ce0 => lineBuff_val_1_V_ce0,
        we0 => lineBuff_val_1_V_we0,
        d0 => lineBuff_val_2_V_q0,
        q0 => lineBuff_val_1_V_q0,
        address1 => lineBuff_val_1_V_address1,
        ce1 => lineBuff_val_1_V_ce1,
        q1 => lineBuff_val_1_V_q1);

    lineBuff_val_2_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_2_V_address0,
        ce0 => lineBuff_val_2_V_ce0,
        we0 => lineBuff_val_2_V_we0,
        d0 => src_V_V_dout,
        q0 => lineBuff_val_2_V_q0,
        address1 => lineBuff_val_2_V_address1,
        ce1 => lineBuff_val_2_V_ce1,
        q1 => lineBuff_val_2_V_q1);

    image_filter_mac_ibs_U29 : component image_filter_mac_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 14,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_825_p0,
        din1 => grp_fu_825_p1,
        din2 => grp_fu_825_p2,
        dout => grp_fu_825_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_285 <= idxCol_1_reg_928;
            elsif (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_assign_reg_285 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    countWait_1_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                countWait_1_reg_331 <= ap_const_lv10_0;
            elsif ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                countWait_1_reg_331 <= countWait_4_fu_819_p2;
            end if; 
        end if;
    end process;

    countWait_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                countWait_reg_319 <= phitmp_reg_938;
            elsif (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                countWait_reg_319 <= ap_const_lv19_1;
            end if; 
        end if;
    end process;

    i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_274 <= i_2_fu_348_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_274 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    idxRow_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idxRow_reg_296 <= idxRow_1_reg_878;
            elsif (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idxRow_reg_296 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pixConvolved_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond3_reg_842 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                pixConvolved_reg_307 <= pixConvolved_2_reg_933;
            elsif (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                pixConvolved_reg_307 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond3_reg_842 <= exitcond3_reg_842;
                ap_reg_pp0_iter1_or_cond_reg_861 <= or_cond_reg_861;
                ap_reg_pp0_iter1_tmp_23_reg_883 <= tmp_23_reg_883;
                exitcond3_reg_842 <= exitcond3_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                idxCol_1_reg_928 <= idxCol_1_fu_473_p3;
                phitmp_reg_938 <= phitmp_fu_486_p2;
                pixConvolved_2_reg_933 <= pixConvolved_2_fu_479_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxCol_reg_873 <= idxCol_fu_410_p2;
                lineBuff_val_1_V_ad_reg_851 <= tmp_s_fu_360_p1(9 - 1 downto 0);
                lineBuff_val_2_V_ad_reg_856 <= tmp_s_fu_360_p1(9 - 1 downto 0);
                or_cond_reg_861 <= or_cond_fu_398_p2;
                tmp_21_reg_867 <= tmp_21_fu_404_p2;
                tmp_23_reg_883 <= tmp_23_fu_430_p2;
                    tmp_s_reg_846(31 downto 0) <= tmp_s_fu_360_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxRow_1_reg_878 <= idxRow_1_fu_422_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_861 = ap_const_lv1_1) and (exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lineBuff_val_0_V_lo_5_reg_954 <= lineBuff_val_0_V_q1;
                lineBuff_val_0_V_lo_reg_943 <= lineBuff_val_0_V_q0;
                lineBuff_val_1_V_lo_3_reg_960 <= lineBuff_val_1_V_q1;
                lineBuff_val_1_V_lo_4_reg_966 <= lineBuff_val_1_V_q0;
                lineBuff_val_2_V_lo_6_reg_976 <= lineBuff_val_2_V_q1;
                lineBuff_val_2_V_lo_7_reg_982 <= lineBuff_val_2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_861 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_x_V_reg_1013 <= accumulator_V_2_2_fu_789_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_861 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    tmp2_reg_993(13 downto 1) <= tmp2_fu_701_p2(13 downto 1);
                    tmp3_reg_998(13 downto 1) <= tmp3_fu_707_p2(13 downto 1);
                    tmp7_reg_1008(13 downto 1) <= tmp7_fu_713_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_861 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                tmp5_reg_1003 <= grp_fu_825_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_861 = ap_const_lv1_1) and (exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    tmp_118_0_1_reg_892(31 downto 0) <= tmp_118_0_1_fu_449_p1(31 downto 0);
                    tmp_118_0_2_reg_897(31 downto 0) <= tmp_118_0_2_fu_461_p1(31 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_846(63 downto 32) <= "00000000000000000000000000000000";
    tmp_118_0_1_reg_892(63 downto 32) <= "00000000000000000000000000000000";
    tmp_118_0_2_reg_897(63 downto 32) <= "00000000000000000000000000000000";
    tmp2_reg_993(0) <= '0';
    tmp3_reg_998(0) <= '0';
    tmp7_reg_1008(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dst_x_V_V_full_n, dst_y_V_V_full_n, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state11, exitcond_fu_813_p2, exitcond2_fu_342_p2, ap_CS_fsm_state2, exitcond3_fu_354_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond3_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond3_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    accumulator_V_2_2_fu_789_p2 <= std_logic_vector(unsigned(tmp4_fu_783_p2) + unsigned(tmp1_cast_fu_763_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_x_V_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_x_V_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_x_V_V_full_n = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(src_V_V_empty_n, ap_enable_reg_pp0_iter0, exitcond3_reg_842)
    begin
                ap_block_pp0_stage1_11001 <= ((exitcond3_reg_842 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(src_V_V_empty_n, ap_enable_reg_pp0_iter0, exitcond3_reg_842)
    begin
                ap_block_pp0_stage1_subdone <= ((exitcond3_reg_842 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state11_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, exitcond_fu_813_p2)
    begin
                ap_block_state11 <= (((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage1_iter0_assign_proc : process(src_V_V_empty_n, exitcond3_reg_842)
    begin
                ap_block_state4_pp0_stage1_iter0 <= ((exitcond3_reg_842 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter2_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_reg_pp0_iter1_tmp_23_reg_883)
    begin
                ap_block_state9_pp0_stage0_iter2 <= (((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (dst_x_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond3_fu_354_p2)
    begin
        if ((exitcond3_fu_354_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, dst_x_V_V_full_n, dst_y_V_V_full_n, ap_CS_fsm_state11, exitcond_fu_813_p2)
    begin
        if ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_289_p4_assign_proc : process(exitcond3_reg_842, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_assign_reg_285, idxCol_1_reg_928, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_col_assign_phi_fu_289_p4 <= idxCol_1_reg_928;
        else 
            ap_phi_mux_col_assign_phi_fu_289_p4 <= col_assign_reg_285;
        end if; 
    end process;


    ap_phi_mux_countWait_phi_fu_323_p4_assign_proc : process(exitcond3_reg_842, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, countWait_reg_319, phitmp_reg_938, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_countWait_phi_fu_323_p4 <= phitmp_reg_938;
        else 
            ap_phi_mux_countWait_phi_fu_323_p4 <= countWait_reg_319;
        end if; 
    end process;


    ap_phi_mux_idxRow_phi_fu_300_p4_assign_proc : process(exitcond3_reg_842, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, idxRow_reg_296, idxRow_1_reg_878, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_idxRow_phi_fu_300_p4 <= idxRow_1_reg_878;
        else 
            ap_phi_mux_idxRow_phi_fu_300_p4 <= idxRow_reg_296;
        end if; 
    end process;


    ap_phi_mux_pixConvolved_phi_fu_311_p4_assign_proc : process(pixConvolved_reg_307, ap_reg_pp0_iter1_exitcond3_reg_842, ap_CS_fsm_pp0_stage2, pixConvolved_2_reg_933, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((ap_reg_pp0_iter1_exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_pixConvolved_phi_fu_311_p4 <= pixConvolved_2_reg_933;
        else 
            ap_phi_mux_pixConvolved_phi_fu_311_p4 <= pixConvolved_reg_307;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    col_assign_7_0_2_fu_455_p2 <= std_logic_vector(unsigned(ap_phi_mux_pixConvolved_phi_fu_311_p4) + unsigned(ap_const_lv32_2));
    countWait_4_fu_819_p2 <= std_logic_vector(unsigned(countWait_1_reg_331) + unsigned(ap_const_lv10_1));

    dst_x_V_V_blk_n_assign_proc : process(dst_x_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_tmp_23_reg_883, ap_CS_fsm_state11, exitcond_fu_813_p2)
    begin
        if ((((exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dst_x_V_V_blk_n <= dst_x_V_V_full_n;
        else 
            dst_x_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_x_V_V_din_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883, ap_CS_fsm_state11, exitcond_fu_813_p2, tmp_V_fu_805_p3, ap_block_pp0_stage0_01001)
    begin
        if ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            dst_x_V_V_din <= ap_const_lv8_0;
        elsif (((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_x_V_V_din <= tmp_V_fu_805_p3;
        else 
            dst_x_V_V_din <= "XXXXXXXX";
        end if; 
    end process;


    dst_x_V_V_write_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883, ap_CS_fsm_state11, exitcond_fu_813_p2, ap_block_pp0_stage0_11001)
    begin
        if (((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dst_x_V_V_write <= ap_const_logic_1;
        else 
            dst_x_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_y_V_V_blk_n_assign_proc : process(dst_y_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_tmp_23_reg_883, ap_CS_fsm_state11, exitcond_fu_813_p2)
    begin
        if ((((exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dst_y_V_V_blk_n <= dst_y_V_V_full_n;
        else 
            dst_y_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_y_V_V_din_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883, ap_CS_fsm_state11, exitcond_fu_813_p2, tmp_V_fu_805_p3, ap_block_pp0_stage0_01001)
    begin
        if ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            dst_y_V_V_din <= ap_const_lv8_0;
        elsif (((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_y_V_V_din <= tmp_V_fu_805_p3;
        else 
            dst_y_V_V_din <= "XXXXXXXX";
        end if; 
    end process;


    dst_y_V_V_write_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_23_reg_883, ap_CS_fsm_state11, exitcond_fu_813_p2, ap_block_pp0_stage0_11001)
    begin
        if (((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_reg_pp0_iter1_tmp_23_reg_883 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dst_y_V_V_write <= ap_const_logic_1;
        else 
            dst_y_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_342_p2 <= "1" when (i_reg_274 = ap_const_lv4_9) else "0";
    exitcond3_fu_354_p2 <= "1" when (ap_phi_mux_countWait_phi_fu_323_p4 = ap_const_lv19_40001) else "0";
    exitcond_fu_813_p2 <= "1" when (countWait_1_reg_331 = ap_const_lv10_201) else "0";
    grp_fu_825_p0 <= grp_fu_825_p00(8 - 1 downto 0);
    grp_fu_825_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_1_V_lo_4_reg_966),15));
    grp_fu_825_p1 <= ap_const_lv15_25(7 - 1 downto 0);
    grp_fu_825_p2 <= grp_fu_825_p20(14 - 1 downto 0);
    grp_fu_825_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_3_1_2_fu_633_p2),15));
    i_2_fu_348_p2 <= std_logic_vector(unsigned(i_reg_274) + unsigned(ap_const_lv4_1));
    icmp3_fu_392_p2 <= "1" when (signed(tmp_40_fu_382_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_376_p2 <= "1" when (signed(tmp_39_fu_366_p4) > signed(ap_const_lv31_0)) else "0";
    idxCol_1_fu_473_p3 <= 
        idxCol_reg_873 when (tmp_21_reg_867(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_410_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_assign_phi_fu_289_p4) + unsigned(ap_const_lv32_1));
    idxRow_1_fu_422_p3 <= 
        ap_phi_mux_idxRow_phi_fu_300_p4 when (tmp_21_fu_404_p2(0) = '1') else 
        idxRow_4_fu_416_p2;
    idxRow_4_fu_416_p2 <= std_logic_vector(unsigned(ap_phi_mux_idxRow_phi_fu_300_p4) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(dst_x_V_V_full_n, dst_y_V_V_full_n, ap_CS_fsm_state11, exitcond_fu_813_p2)
    begin
        if ((not((((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_y_V_V_full_n = ap_const_logic_0)) or ((exitcond_fu_813_p2 = ap_const_lv1_0) and (dst_x_V_V_full_n = ap_const_logic_0)))) and (exitcond_fu_813_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_s_reg_846, ap_CS_fsm_pp0_stage2, tmp_118_0_1_reg_892, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, tmp_20_fu_436_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuff_val_0_V_address0 <= tmp_118_0_1_reg_892(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lineBuff_val_0_V_address0 <= tmp_20_fu_436_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lineBuff_val_0_V_address0 <= tmp_s_reg_846(9 - 1 downto 0);
        else 
            lineBuff_val_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    lineBuff_val_0_V_address1 <= tmp_118_0_2_fu_461_p1(9 - 1 downto 0);

    lineBuff_val_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lineBuff_val_0_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            lineBuff_val_0_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond3_reg_842, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lineBuff_val_0_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_s_fu_360_p1, lineBuff_val_1_V_ad_reg_851, ap_CS_fsm_pp0_stage2, tmp_118_0_1_fu_449_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_1_V_address0 <= tmp_118_0_1_fu_449_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_1_V_address0 <= lineBuff_val_1_V_ad_reg_851;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_1_V_address0 <= tmp_s_fu_360_p1(9 - 1 downto 0);
            else 
                lineBuff_val_1_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, tmp_118_0_2_reg_897, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, tmp_20_fu_436_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuff_val_1_V_address1 <= tmp_118_0_2_reg_897(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lineBuff_val_1_V_address1 <= tmp_20_fu_436_p1(9 - 1 downto 0);
        else 
            lineBuff_val_1_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lineBuff_val_1_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_1_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond3_reg_842, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lineBuff_val_1_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_s_fu_360_p1, lineBuff_val_2_V_ad_reg_856, ap_CS_fsm_pp0_stage2, tmp_118_0_1_fu_449_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_2_V_address0 <= tmp_118_0_1_fu_449_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_2_V_address0 <= lineBuff_val_2_V_ad_reg_856;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_2_V_address0 <= tmp_s_fu_360_p1(9 - 1 downto 0);
            else 
                lineBuff_val_2_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, tmp_118_0_2_reg_897, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, tmp_20_fu_436_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuff_val_2_V_address1 <= tmp_118_0_2_reg_897(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lineBuff_val_2_V_address1 <= tmp_20_fu_436_p1(9 - 1 downto 0);
        else 
            lineBuff_val_2_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lineBuff_val_2_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_2_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond3_reg_842, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lineBuff_val_2_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_398_p2 <= (icmp_fu_376_p2 and icmp3_fu_392_p2);
    p_shl10_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_621_p3),14));
    p_shl11_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_719_p3),14));
    p_shl12_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_730_p3),14));
    p_shl13_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_643_p3),14));
    p_shl14_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_654_p3),14));
    p_shl15_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_683_p3),14));
    p_shl1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_492_p3),14));
    p_shl2_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_503_p3),14));
    p_shl3_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_520_p3),14));
    p_shl4_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_532_p3),14));
    p_shl5_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_550_p3),14));
    p_shl6_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_561_p3),14));
    p_shl7_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_578_p3),14));
    p_shl8_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_589_p3),14));
    p_shl9_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_609_p3),14));
    p_shl_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_671_p3),14));
    phitmp_fu_486_p2 <= std_logic_vector(unsigned(countWait_reg_319) + unsigned(ap_const_lv19_1));
    pixConvolved_1_fu_466_p3 <= 
        pixConvolved_5_fu_443_p2 when (or_cond_reg_861(0) = '1') else 
        ap_phi_mux_pixConvolved_phi_fu_311_p4;
    pixConvolved_2_fu_479_p3 <= 
        pixConvolved_1_fu_466_p3 when (tmp_21_reg_867(0) = '1') else 
        ap_const_lv32_0;
    pixConvolved_5_fu_443_p2 <= std_logic_vector(unsigned(ap_phi_mux_pixConvolved_phi_fu_311_p4) + unsigned(ap_const_lv32_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    src_V_V_blk_n_assign_proc : process(src_V_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond3_reg_842)
    begin
        if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_V_V_blk_n <= src_V_V_empty_n;
        else 
            src_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond3_reg_842, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond3_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_V_V_read <= ap_const_logic_1;
        else 
            src_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_757_p2),16));
    tmp1_fu_757_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_754_p1) + unsigned(tmp2_cast_fu_751_p1));
    tmp2_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_993),15));
    tmp2_fu_701_p2 <= std_logic_vector(unsigned(val_V_3_fu_514_p2) + unsigned(val_V_3_0_1_fu_544_p2));
    tmp3_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_998),15));
    tmp3_fu_707_p2 <= std_logic_vector(unsigned(val_V_3_0_2_fu_572_p2) + unsigned(val_V_3_1_fu_600_p2));
    tmp4_fu_783_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_779_p1) + unsigned(tmp5_cast_fu_767_p1));
    tmp5_cast_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_reg_1003),16));
    tmp6_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_773_p2),16));
    tmp6_fu_773_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_770_p1) + unsigned(val_V_3_2_cast_fu_747_p1));
    tmp7_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_reg_1008),15));
    tmp7_fu_713_p2 <= std_logic_vector(unsigned(val_V_3_2_1_fu_665_p2) + unsigned(val_V_3_2_2_fu_695_p2));
    tmp_118_0_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixConvolved_5_fu_443_p2),64));
    tmp_118_0_2_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_7_0_2_fu_455_p2),64));
    tmp_20_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_pixConvolved_phi_fu_311_p4),64));
    tmp_21_fu_404_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_289_p4) < signed(ap_const_lv32_1FF)) else "0";
    tmp_22_fu_503_p3 <= (lineBuff_val_0_V_lo_reg_943 & ap_const_lv3_0);
    tmp_23_fu_430_p2 <= "1" when (unsigned(ap_phi_mux_countWait_phi_fu_323_p4) > unsigned(ap_const_lv19_201)) else "0";
    tmp_25_fu_520_p3 <= (lineBuff_val_0_V_q0 & ap_const_lv5_0);
    tmp_26_fu_532_p3 <= (lineBuff_val_0_V_q0 & ap_const_lv1_0);
    tmp_27_fu_550_p3 <= (lineBuff_val_0_V_lo_5_reg_954 & ap_const_lv5_0);
    tmp_28_fu_561_p3 <= (lineBuff_val_0_V_lo_5_reg_954 & ap_const_lv3_0);
    tmp_29_fu_578_p3 <= (lineBuff_val_1_V_lo_3_reg_960 & ap_const_lv5_0);
    tmp_30_fu_589_p3 <= (lineBuff_val_1_V_lo_3_reg_960 & ap_const_lv1_0);
    tmp_31_fu_609_p3 <= (lineBuff_val_1_V_q1 & ap_const_lv5_0);
    tmp_32_fu_621_p3 <= (lineBuff_val_1_V_q1 & ap_const_lv1_0);
    tmp_33_fu_719_p3 <= (lineBuff_val_2_V_lo_6_reg_976 & ap_const_lv5_0);
    tmp_34_fu_730_p3 <= (lineBuff_val_2_V_lo_6_reg_976 & ap_const_lv3_0);
    tmp_35_fu_643_p3 <= (lineBuff_val_2_V_lo_7_reg_982 & ap_const_lv5_0);
    tmp_36_fu_654_p3 <= (lineBuff_val_2_V_lo_7_reg_982 & ap_const_lv1_0);
    tmp_37_fu_671_p3 <= (lineBuff_val_2_V_q1 & ap_const_lv5_0);
    tmp_38_fu_683_p3 <= (lineBuff_val_2_V_q1 & ap_const_lv3_0);
    tmp_39_fu_366_p4 <= ap_phi_mux_idxRow_phi_fu_300_p4(31 downto 1);
    tmp_40_fu_382_p4 <= ap_phi_mux_col_assign_phi_fu_289_p4(31 downto 1);
    tmp_V_fu_805_p3 <= 
        out_x_V_reg_1013 when (ap_reg_pp0_iter1_or_cond_reg_861(0) = '1') else 
        ap_const_lv8_0;
    tmp_fu_492_p3 <= (lineBuff_val_0_V_lo_reg_943 & ap_const_lv5_0);
    tmp_s_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_289_p4),64));
    val_V_3_0_1_fu_544_p2 <= std_logic_vector(unsigned(p_shl3_fu_528_p1) - unsigned(p_shl4_fu_540_p1));
    val_V_3_0_2_fu_572_p2 <= std_logic_vector(unsigned(p_shl5_fu_557_p1) - unsigned(p_shl6_fu_568_p1));
    val_V_3_1_2_fu_633_p2 <= std_logic_vector(unsigned(p_shl9_fu_617_p1) - unsigned(p_shl10_fu_629_p1));
    val_V_3_1_fu_600_p2 <= std_logic_vector(unsigned(p_shl7_fu_585_p1) - unsigned(p_shl8_fu_596_p1));
    val_V_3_2_1_fu_665_p2 <= std_logic_vector(unsigned(p_shl13_fu_650_p1) - unsigned(p_shl14_fu_661_p1));
    val_V_3_2_2_fu_695_p2 <= std_logic_vector(unsigned(p_shl_fu_679_p1) - unsigned(p_shl15_fu_691_p1));
    val_V_3_2_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_3_2_fu_741_p2),15));
    val_V_3_2_fu_741_p2 <= std_logic_vector(unsigned(p_shl11_fu_726_p1) - unsigned(p_shl12_fu_737_p1));
    val_V_3_fu_514_p2 <= std_logic_vector(unsigned(p_shl1_fu_499_p1) - unsigned(p_shl2_fu_510_p1));
end behav;
