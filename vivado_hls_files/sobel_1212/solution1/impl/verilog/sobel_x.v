// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sobel_x (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_V_V_dout,
        src_V_V_empty_n,
        src_V_V_read,
        dst_V_V_din,
        dst_V_V_full_n,
        dst_V_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_state8 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_V_V_dout;
input   src_V_V_empty_n;
output   src_V_V_read;
output  [7:0] dst_V_V_din;
input   dst_V_V_full_n;
output   dst_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_V_V_read;
reg[7:0] dst_V_V_din;
reg dst_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond6_reg_547;
reg    dst_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2;
reg   [0:0] tmp_19_reg_588;
reg   [0:0] ap_reg_pp0_iter1_tmp_19_reg_588;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_535_p2;
reg   [31:0] col_assign_reg_211;
reg   [31:0] idxRow_reg_222;
reg   [31:0] pixConvolved_reg_233;
reg   [18:0] countWait_reg_245;
wire   [0:0] exitcond6_fu_268_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond6_reg_547;
wire   [63:0] tmp_s_fu_274_p1;
reg   [63:0] tmp_s_reg_551;
reg   [8:0] lineBuff_val_1_V_ad_reg_556;
reg   [8:0] lineBuff_val_2_V_ad_reg_561;
wire   [0:0] or_cond_fu_312_p2;
reg   [0:0] or_cond_reg_566;
reg   [0:0] ap_reg_pp0_iter1_or_cond_reg_566;
wire   [0:0] tmp_18_fu_318_p2;
reg   [0:0] tmp_18_reg_572;
wire   [31:0] idxCol_fu_324_p2;
reg   [31:0] idxCol_reg_578;
wire   [31:0] idxRow_1_fu_336_p3;
reg   [31:0] idxRow_1_reg_583;
wire   [0:0] tmp_19_fu_344_p2;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state7_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] idxCol_1_fu_383_p3;
reg   [31:0] idxCol_1_reg_622;
wire   [31:0] pixConvolved_2_fu_389_p3;
reg   [31:0] pixConvolved_2_reg_627;
wire   [18:0] phitmp_fu_396_p2;
reg   [18:0] phitmp_reg_632;
wire   [7:0] lineBuff_val_1_V_q0;
reg   [7:0] lineBuff_val_1_V_lo_1_reg_637;
wire   [7:0] lineBuff_val_1_V_q1;
reg   [7:0] lineBuff_val_1_V_lo_2_reg_643;
wire   [7:0] lineBuff_val_2_V_q0;
reg   [7:0] lineBuff_val_2_V_lo_4_reg_649;
wire   [7:0] lineBuff_val_2_V_q1;
reg   [7:0] lineBuff_val_2_V_lo_5_reg_655;
wire   [8:0] accumulator_V_0_2_fu_410_p2;
reg   [8:0] accumulator_V_0_2_reg_661;
wire   [7:0] tmp_10_fu_416_p2;
reg   [7:0] tmp_10_reg_666;
wire   [10:0] accumulator_V_2_2_fu_497_p2;
reg   [10:0] accumulator_V_2_2_reg_671;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] out_V_fu_503_p2;
reg   [7:0] out_V_reg_676;
wire   [9:0] countWait_3_fu_541_p2;
reg    ap_block_state9;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage2_subdone;
reg   [8:0] lineBuff_val_0_V_address0;
reg    lineBuff_val_0_V_ce0;
reg    lineBuff_val_0_V_we0;
wire   [7:0] lineBuff_val_0_V_q0;
wire   [8:0] lineBuff_val_0_V_address1;
reg    lineBuff_val_0_V_ce1;
wire   [7:0] lineBuff_val_0_V_q1;
reg   [8:0] lineBuff_val_1_V_address0;
reg    lineBuff_val_1_V_ce0;
reg    lineBuff_val_1_V_we0;
wire   [8:0] lineBuff_val_1_V_address1;
reg    lineBuff_val_1_V_ce1;
reg   [8:0] lineBuff_val_2_V_address0;
reg    lineBuff_val_2_V_ce0;
reg    lineBuff_val_2_V_we0;
wire   [8:0] lineBuff_val_2_V_address1;
reg    lineBuff_val_2_V_ce1;
reg   [31:0] ap_phi_mux_col_assign_phi_fu_215_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_226_p4;
reg   [31:0] ap_phi_mux_pixConvolved_phi_fu_237_p4;
reg   [18:0] ap_phi_mux_countWait_phi_fu_249_p4;
reg   [9:0] countWait_1_reg_257;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_12_fu_350_p1;
wire   [63:0] tmp_40_0_2_fu_369_p1;
wire   [7:0] tmp_V_fu_527_p3;
reg    ap_block_pp0_stage2_01001;
wire   [30:0] tmp_14_fu_280_p4;
wire   [30:0] tmp_17_fu_296_p4;
wire   [0:0] icmp_fu_290_p2;
wire   [0:0] icmp2_fu_306_p2;
wire   [31:0] idxRow_3_fu_330_p2;
wire   [31:0] col_assign_4_0_2_fu_363_p2;
wire   [31:0] pixConvolved_4_fu_357_p2;
wire   [31:0] pixConvolved_1_fu_376_p3;
wire   [8:0] val_V_0_2_cast_fu_406_p1;
wire   [8:0] val_V_0_cast_fu_402_p1;
wire   [8:0] p_shl_fu_422_p3;
wire   [8:0] val_V_2_1_2_fu_438_p3;
wire  signed [10:0] accumulator_V_0_2_ca_fu_455_p1;
wire   [10:0] p_shl_cast_fu_429_p1;
wire   [7:0] tmp_13_fu_433_p2;
wire   [10:0] accumulator_V_1_fu_458_p2;
wire   [10:0] val_V_2_1_2_cast_fu_445_p1;
wire   [7:0] tmp_20_fu_469_p2;
wire   [7:0] tmp_11_fu_464_p2;
wire   [10:0] accumulator_V_1_2_fu_474_p2;
wire   [10:0] val_V_27_cast_fu_449_p1;
wire   [7:0] tmp_15_fu_480_p2;
wire   [10:0] accumulator_V_2_fu_486_p2;
wire   [10:0] val_V_27_2_cast_fu_452_p1;
wire   [7:0] tmp_16_fu_492_p2;
wire   [0:0] tmp_21_fu_508_p3;
wire   [7:0] out_V_3_fu_515_p2;
wire   [7:0] out_V_4_fu_520_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_0_V_address0),
    .ce0(lineBuff_val_0_V_ce0),
    .we0(lineBuff_val_0_V_we0),
    .d0(lineBuff_val_1_V_q0),
    .q0(lineBuff_val_0_V_q0),
    .address1(lineBuff_val_0_V_address1),
    .ce1(lineBuff_val_0_V_ce1),
    .q1(lineBuff_val_0_V_q1)
);

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_1_V_address0),
    .ce0(lineBuff_val_1_V_ce0),
    .we0(lineBuff_val_1_V_we0),
    .d0(lineBuff_val_2_V_q0),
    .q0(lineBuff_val_1_V_q0),
    .address1(lineBuff_val_1_V_address1),
    .ce1(lineBuff_val_1_V_ce1),
    .q1(lineBuff_val_1_V_q1)
);

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_2_V_address0),
    .ce0(lineBuff_val_2_V_ce0),
    .we0(lineBuff_val_2_V_we0),
    .d0(src_V_V_dout),
    .q0(lineBuff_val_2_V_q0),
    .address1(lineBuff_val_2_V_address1),
    .ce1(lineBuff_val_2_V_ce1),
    .q1(lineBuff_val_2_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_211 <= idxCol_1_reg_622;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_211 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        countWait_1_reg_257 <= 10'd0;
    end else if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        countWait_1_reg_257 <= countWait_3_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        countWait_reg_245 <= phitmp_reg_632;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        countWait_reg_245 <= 19'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_reg_222 <= idxRow_1_reg_583;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        idxRow_reg_222 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixConvolved_reg_233 <= pixConvolved_2_reg_627;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pixConvolved_reg_233 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_566 == 1'd1) & (exitcond6_reg_547 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        accumulator_V_0_2_reg_661 <= accumulator_V_0_2_fu_410_p2;
        tmp_10_reg_666 <= tmp_10_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_566 == 1'd1) & (ap_reg_pp0_iter1_exitcond6_reg_547 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        accumulator_V_2_2_reg_671 <= accumulator_V_2_2_fu_497_p2;
        out_V_reg_676 <= out_V_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond6_reg_547 <= exitcond6_reg_547;
        ap_reg_pp0_iter1_or_cond_reg_566 <= or_cond_reg_566;
        ap_reg_pp0_iter1_tmp_19_reg_588 <= tmp_19_reg_588;
        exitcond6_reg_547 <= exitcond6_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_reg_547 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        idxCol_1_reg_622 <= idxCol_1_fu_383_p3;
        phitmp_reg_632 <= phitmp_fu_396_p2;
        pixConvolved_2_reg_627 <= pixConvolved_2_fu_389_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxCol_reg_578 <= idxCol_fu_324_p2;
        lineBuff_val_1_V_ad_reg_556 <= tmp_s_fu_274_p1;
        lineBuff_val_2_V_ad_reg_561 <= tmp_s_fu_274_p1;
        or_cond_reg_566 <= or_cond_fu_312_p2;
        tmp_18_reg_572 <= tmp_18_fu_318_p2;
        tmp_19_reg_588 <= tmp_19_fu_344_p2;
        tmp_s_reg_551[31 : 0] <= tmp_s_fu_274_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_268_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_1_reg_583 <= idxRow_1_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_566 == 1'd1) & (exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuff_val_1_V_lo_1_reg_637 <= lineBuff_val_1_V_q0;
        lineBuff_val_1_V_lo_2_reg_643 <= lineBuff_val_1_V_q1;
        lineBuff_val_2_V_lo_4_reg_649 <= lineBuff_val_2_V_q0;
        lineBuff_val_2_V_lo_5_reg_655 <= lineBuff_val_2_V_q1;
    end
end

always @ (*) begin
    if ((exitcond6_fu_268_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_col_assign_phi_fu_215_p4 = idxCol_1_reg_622;
    end else begin
        ap_phi_mux_col_assign_phi_fu_215_p4 = col_assign_reg_211;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_countWait_phi_fu_249_p4 = phitmp_reg_632;
    end else begin
        ap_phi_mux_countWait_phi_fu_249_p4 = countWait_reg_245;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_idxRow_phi_fu_226_p4 = idxRow_1_reg_583;
    end else begin
        ap_phi_mux_idxRow_phi_fu_226_p4 = idxRow_reg_222;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_reg_pp0_iter1_exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_mux_pixConvolved_phi_fu_237_p4 = pixConvolved_2_reg_627;
    end else begin
        ap_phi_mux_pixConvolved_phi_fu_237_p4 = pixConvolved_reg_233;
    end
end

always @ (*) begin
    if ((((exitcond_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        dst_V_V_blk_n = dst_V_V_full_n;
    end else begin
        dst_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        dst_V_V_din = 8'd0;
    end else if (((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_V_V_din = tmp_V_fu_527_p3;
    end else begin
        dst_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        dst_V_V_write = 1'b1;
    end else begin
        dst_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_0_V_address0 = tmp_12_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_0_V_address0 = tmp_s_reg_551;
        end else begin
            lineBuff_val_0_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_0_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lineBuff_val_0_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_0_V_we0 = 1'b1;
    end else begin
        lineBuff_val_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_V_address0 = tmp_12_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_1_V_address0 = lineBuff_val_1_V_ad_reg_556;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_1_V_address0 = tmp_s_fu_274_p1;
        end else begin
            lineBuff_val_1_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_1_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lineBuff_val_1_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_1_V_we0 = 1'b1;
    end else begin
        lineBuff_val_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_V_address0 = tmp_12_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_2_V_address0 = lineBuff_val_2_V_ad_reg_561;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_2_V_address0 = tmp_s_fu_274_p1;
        end else begin
            lineBuff_val_2_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_2_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lineBuff_val_2_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_2_V_we0 = 1'b1;
    end else begin
        lineBuff_val_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_V_V_blk_n = src_V_V_empty_n;
    end else begin
        src_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond6_reg_547 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_V_read = 1'b1;
    end else begin
        src_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond6_fu_268_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond6_fu_268_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_V_0_2_ca_fu_455_p1 = $signed(accumulator_V_0_2_reg_661);

assign accumulator_V_0_2_fu_410_p2 = (val_V_0_2_cast_fu_406_p1 - val_V_0_cast_fu_402_p1);

assign accumulator_V_1_2_fu_474_p2 = (accumulator_V_1_fu_458_p2 + val_V_2_1_2_cast_fu_445_p1);

assign accumulator_V_1_fu_458_p2 = ($signed(accumulator_V_0_2_ca_fu_455_p1) - $signed(p_shl_cast_fu_429_p1));

assign accumulator_V_2_2_fu_497_p2 = (accumulator_V_2_fu_486_p2 + val_V_27_2_cast_fu_452_p1);

assign accumulator_V_2_fu_486_p2 = (accumulator_V_1_2_fu_474_p2 - val_V_27_cast_fu_449_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((exitcond6_reg_547 == 1'd0) & (src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((exitcond6_reg_547 == 1'd0) & (src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((exitcond6_reg_547 == 1'd0) & (src_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage2_iter1 = ((ap_reg_pp0_iter1_tmp_19_reg_588 == 1'd1) & (dst_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((exitcond_fu_535_p2 == 1'd0) & (dst_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign col_assign_4_0_2_fu_363_p2 = (32'd2 + ap_phi_mux_pixConvolved_phi_fu_237_p4);

assign countWait_3_fu_541_p2 = (countWait_1_reg_257 + 10'd1);

assign exitcond6_fu_268_p2 = ((ap_phi_mux_countWait_phi_fu_249_p4 == 19'd262145) ? 1'b1 : 1'b0);

assign exitcond_fu_535_p2 = ((countWait_1_reg_257 == 10'd513) ? 1'b1 : 1'b0);

assign icmp2_fu_306_p2 = (($signed(tmp_17_fu_296_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_290_p2 = (($signed(tmp_14_fu_280_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_383_p3 = ((tmp_18_reg_572[0:0] === 1'b1) ? idxCol_reg_578 : 32'd0);

assign idxCol_fu_324_p2 = (32'd1 + ap_phi_mux_col_assign_phi_fu_215_p4);

assign idxRow_1_fu_336_p3 = ((tmp_18_fu_318_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_226_p4 : idxRow_3_fu_330_p2);

assign idxRow_3_fu_330_p2 = (32'd1 + ap_phi_mux_idxRow_phi_fu_226_p4);

assign lineBuff_val_0_V_address1 = tmp_40_0_2_fu_369_p1;

assign lineBuff_val_1_V_address1 = tmp_40_0_2_fu_369_p1;

assign lineBuff_val_2_V_address1 = tmp_40_0_2_fu_369_p1;

assign or_cond_fu_312_p2 = (icmp_fu_290_p2 & icmp2_fu_306_p2);

assign out_V_3_fu_515_p2 = (8'd0 - out_V_reg_676);

assign out_V_4_fu_520_p3 = ((tmp_21_fu_508_p3[0:0] === 1'b1) ? out_V_3_fu_515_p2 : out_V_reg_676);

assign out_V_fu_503_p2 = (lineBuff_val_2_V_lo_5_reg_655 + tmp_16_fu_492_p2);

assign p_shl_cast_fu_429_p1 = p_shl_fu_422_p3;

assign p_shl_fu_422_p3 = {{lineBuff_val_1_V_lo_1_reg_637}, {1'd0}};

assign phitmp_fu_396_p2 = (countWait_reg_245 + 19'd1);

assign pixConvolved_1_fu_376_p3 = ((or_cond_reg_566[0:0] === 1'b1) ? pixConvolved_4_fu_357_p2 : ap_phi_mux_pixConvolved_phi_fu_237_p4);

assign pixConvolved_2_fu_389_p3 = ((tmp_18_reg_572[0:0] === 1'b1) ? pixConvolved_1_fu_376_p3 : 32'd0);

assign pixConvolved_4_fu_357_p2 = (32'd1 + ap_phi_mux_pixConvolved_phi_fu_237_p4);

assign start_out = real_start;

assign tmp_10_fu_416_p2 = (lineBuff_val_0_V_q1 - lineBuff_val_0_V_q0);

assign tmp_11_fu_464_p2 = (tmp_10_reg_666 - tmp_13_fu_433_p2);

assign tmp_12_fu_350_p1 = ap_phi_mux_pixConvolved_phi_fu_237_p4;

assign tmp_13_fu_433_p2 = lineBuff_val_1_V_lo_1_reg_637 << 8'd1;

assign tmp_14_fu_280_p4 = {{ap_phi_mux_idxRow_phi_fu_226_p4[31:1]}};

assign tmp_15_fu_480_p2 = (tmp_20_fu_469_p2 + tmp_11_fu_464_p2);

assign tmp_16_fu_492_p2 = (tmp_15_fu_480_p2 - lineBuff_val_2_V_lo_4_reg_649);

assign tmp_17_fu_296_p4 = {{ap_phi_mux_col_assign_phi_fu_215_p4[31:1]}};

assign tmp_18_fu_318_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_215_p4) < $signed(32'd511)) ? 1'b1 : 1'b0);

assign tmp_19_fu_344_p2 = ((ap_phi_mux_countWait_phi_fu_249_p4 > 19'd513) ? 1'b1 : 1'b0);

assign tmp_20_fu_469_p2 = lineBuff_val_1_V_lo_2_reg_643 << 8'd1;

assign tmp_21_fu_508_p3 = accumulator_V_2_2_reg_671[32'd10];

assign tmp_40_0_2_fu_369_p1 = col_assign_4_0_2_fu_363_p2;

assign tmp_V_fu_527_p3 = ((ap_reg_pp0_iter1_or_cond_reg_566[0:0] === 1'b1) ? out_V_4_fu_520_p3 : 8'd0);

assign tmp_s_fu_274_p1 = ap_phi_mux_col_assign_phi_fu_215_p4;

assign val_V_0_2_cast_fu_406_p1 = lineBuff_val_0_V_q1;

assign val_V_0_cast_fu_402_p1 = lineBuff_val_0_V_q0;

assign val_V_27_2_cast_fu_452_p1 = lineBuff_val_2_V_lo_5_reg_655;

assign val_V_27_cast_fu_449_p1 = lineBuff_val_2_V_lo_4_reg_649;

assign val_V_2_1_2_cast_fu_445_p1 = val_V_2_1_2_fu_438_p3;

assign val_V_2_1_2_fu_438_p3 = {{lineBuff_val_1_V_lo_2_reg_643}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_551[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //sobel_x
