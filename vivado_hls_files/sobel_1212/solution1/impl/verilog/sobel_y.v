// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sobel_y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_V_V_dout,
        src_V_V_empty_n,
        src_V_V_read,
        dst_V_V_din,
        dst_V_V_full_n,
        dst_V_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_state9 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_V_V_dout;
input   src_V_V_empty_n;
output   src_V_V_read;
output  [7:0] dst_V_V_din;
input   dst_V_V_full_n;
output   dst_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_V_read;
reg[7:0] dst_V_V_din;
reg dst_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond1_reg_551;
reg    dst_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_10_reg_592;
reg   [0:0] ap_reg_pp0_iter1_tmp_10_reg_592;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_539_p2;
reg   [31:0] col_assign_reg_210;
reg   [31:0] idxRow_reg_221;
reg   [31:0] pixConvolved_reg_232;
reg   [18:0] countWait_reg_244;
wire   [0:0] exitcond1_fu_267_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state8_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond1_reg_551;
wire   [63:0] tmp_2_fu_273_p1;
reg   [63:0] tmp_2_reg_555;
reg   [8:0] lineBuff_val_1_V_ad_reg_560;
reg   [8:0] lineBuff_val_2_V_ad_reg_565;
wire   [0:0] or_cond_fu_311_p2;
reg   [0:0] or_cond_reg_570;
reg   [0:0] ap_reg_pp0_iter1_or_cond_reg_570;
wire   [0:0] tmp_s_fu_317_p2;
reg   [0:0] tmp_s_reg_576;
wire   [31:0] idxCol_fu_323_p2;
reg   [31:0] idxCol_reg_582;
wire   [31:0] idxRow_1_fu_335_p3;
reg   [31:0] idxRow_1_reg_587;
wire   [0:0] tmp_10_fu_343_p2;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] col_assign_1_0_2_fu_367_p2;
reg   [31:0] col_assign_1_0_2_reg_606;
wire   [31:0] idxCol_1_fu_380_p3;
reg   [31:0] idxCol_1_reg_621;
wire   [31:0] pixConvolved_2_fu_386_p3;
reg   [31:0] pixConvolved_2_reg_626;
wire   [18:0] phitmp_fu_393_p2;
reg   [18:0] phitmp_reg_631;
wire   [7:0] lineBuff_val_0_V_q0;
reg   [7:0] lineBuff_val_0_V_lo_reg_636;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] lineBuff_val_0_V_q1;
reg   [7:0] lineBuff_val_0_V_lo_1_reg_642;
wire   [7:0] lineBuff_val_2_V_q1;
reg   [7:0] lineBuff_val_2_V_lo_1_reg_653;
wire   [7:0] lineBuff_val_2_V_q0;
reg   [7:0] lineBuff_val_2_V_lo_2_reg_659;
reg   [7:0] lineBuff_val_2_V_lo_3_reg_670;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [9:0] accumulator_V_0_2_fu_437_p2;
reg   [9:0] accumulator_V_0_2_reg_676;
wire   [7:0] tmp2_fu_443_p2;
reg   [7:0] tmp2_reg_681;
wire   [10:0] accumulator_V_2_2_fu_501_p2;
reg   [10:0] accumulator_V_2_2_reg_686;
wire   [7:0] out_V_fu_507_p2;
reg   [7:0] out_V_reg_691;
wire   [9:0] countWait_2_fu_545_p2;
reg    ap_block_state10;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage2_subdone;
reg   [8:0] lineBuff_val_0_V_address0;
reg    lineBuff_val_0_V_ce0;
reg    lineBuff_val_0_V_we0;
wire   [8:0] lineBuff_val_0_V_address1;
reg    lineBuff_val_0_V_ce1;
reg   [8:0] lineBuff_val_1_V_address0;
reg    lineBuff_val_1_V_ce0;
reg    lineBuff_val_1_V_we0;
wire   [7:0] lineBuff_val_1_V_q0;
reg   [8:0] lineBuff_val_2_V_address0;
reg    lineBuff_val_2_V_ce0;
reg    lineBuff_val_2_V_we0;
reg   [8:0] lineBuff_val_2_V_address1;
reg    lineBuff_val_2_V_ce1;
reg   [31:0] ap_phi_mux_col_assign_phi_fu_214_p4;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_225_p4;
reg   [31:0] ap_phi_mux_pixConvolved_phi_fu_236_p4;
wire    ap_block_pp0_stage2;
reg   [18:0] ap_phi_mux_countWait_phi_fu_248_p4;
reg   [9:0] countWait_1_reg_256;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_5_fu_349_p1;
wire   [63:0] tmp_13_0_1_fu_361_p1;
wire   [63:0] tmp_13_0_2_fu_399_p1;
wire   [7:0] tmp_V_fu_531_p3;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] tmp_3_fu_279_p4;
wire   [30:0] tmp_4_fu_295_p4;
wire   [0:0] icmp_fu_289_p2;
wire   [0:0] icmp1_fu_305_p2;
wire   [31:0] idxRow_2_fu_329_p2;
wire   [31:0] pixConvolved_3_fu_355_p2;
wire   [31:0] pixConvolved_1_fu_373_p3;
wire   [8:0] val_V_1_0_1_fu_407_p3;
wire   [8:0] val_V_0_cast_cast_fu_404_p1;
wire   [8:0] val_V_0_2_cast_cast_fu_418_p1;
wire   [8:0] tmp1_fu_427_p2;
wire   [9:0] tmp1_cast_fu_433_p1;
wire   [9:0] val_V_1_0_1_cast_fu_414_p1;
wire   [7:0] tmp_9_fu_422_p2;
wire   [8:0] p_shl_fu_452_p3;
wire   [10:0] accumulator_V_0_2_ca_fu_471_p1;
wire   [10:0] val_V_2_cast_fu_449_p1;
wire   [7:0] tmp_6_fu_474_p2;
wire   [10:0] accumulator_V_2_fu_478_p2;
wire   [10:0] p_shl_cast_fu_459_p1;
wire   [7:0] tmp_7_fu_484_p2;
wire   [7:0] tmp_1_fu_463_p2;
wire   [10:0] accumulator_V_2_1_fu_489_p2;
wire   [10:0] val_V_2_2_cast_fu_468_p1;
wire   [7:0] tmp_8_fu_495_p2;
wire   [0:0] tmp_12_fu_512_p3;
wire   [7:0] out_V_1_fu_519_p2;
wire   [7:0] out_V_2_fu_524_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_0_V_address0),
    .ce0(lineBuff_val_0_V_ce0),
    .we0(lineBuff_val_0_V_we0),
    .d0(lineBuff_val_1_V_q0),
    .q0(lineBuff_val_0_V_q0),
    .address1(lineBuff_val_0_V_address1),
    .ce1(lineBuff_val_0_V_ce1),
    .q1(lineBuff_val_0_V_q1)
);

sobel_y_lineBuff_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_1_V_address0),
    .ce0(lineBuff_val_1_V_ce0),
    .we0(lineBuff_val_1_V_we0),
    .d0(lineBuff_val_2_V_q0),
    .q0(lineBuff_val_1_V_q0)
);

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_2_V_address0),
    .ce0(lineBuff_val_2_V_ce0),
    .we0(lineBuff_val_2_V_we0),
    .d0(src_V_V_dout),
    .q0(lineBuff_val_2_V_q0),
    .address1(lineBuff_val_2_V_address1),
    .ce1(lineBuff_val_2_V_ce1),
    .q1(lineBuff_val_2_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        col_assign_reg_210 <= idxCol_1_reg_621;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_210 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        countWait_1_reg_256 <= 10'd0;
    end else if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        countWait_1_reg_256 <= countWait_2_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        countWait_reg_244 <= phitmp_reg_631;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        countWait_reg_244 <= 19'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        idxRow_reg_221 <= idxRow_1_reg_587;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        idxRow_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond1_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixConvolved_reg_232 <= pixConvolved_2_reg_626;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pixConvolved_reg_232 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_570 == 1'd1) & (ap_reg_pp0_iter1_exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        accumulator_V_0_2_reg_676 <= accumulator_V_0_2_fu_437_p2;
        tmp2_reg_681 <= tmp2_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_570 == 1'd1) & (ap_reg_pp0_iter1_exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        accumulator_V_2_2_reg_686 <= accumulator_V_2_2_fu_501_p2;
        out_V_reg_691 <= out_V_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond1_reg_551 <= exitcond1_reg_551;
        ap_reg_pp0_iter1_or_cond_reg_570 <= or_cond_reg_570;
        ap_reg_pp0_iter1_tmp_10_reg_592 <= tmp_10_reg_592;
        exitcond1_reg_551 <= exitcond1_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_570 == 1'd1) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        col_assign_1_0_2_reg_606 <= col_assign_1_0_2_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        idxCol_1_reg_621 <= idxCol_1_fu_380_p3;
        phitmp_reg_631 <= phitmp_fu_393_p2;
        pixConvolved_2_reg_626 <= pixConvolved_2_fu_386_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idxCol_reg_582 <= idxCol_fu_323_p2;
        lineBuff_val_1_V_ad_reg_560 <= tmp_2_fu_273_p1;
        lineBuff_val_2_V_ad_reg_565 <= tmp_2_fu_273_p1;
        or_cond_reg_570 <= or_cond_fu_311_p2;
        tmp_10_reg_592 <= tmp_10_fu_343_p2;
        tmp_2_reg_555[31 : 0] <= tmp_2_fu_273_p1[31 : 0];
        tmp_s_reg_576 <= tmp_s_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        idxRow_1_reg_587 <= idxRow_1_fu_335_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_570 == 1'd1) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuff_val_0_V_lo_1_reg_642 <= lineBuff_val_0_V_q1;
        lineBuff_val_0_V_lo_reg_636 <= lineBuff_val_0_V_q0;
        lineBuff_val_2_V_lo_1_reg_653 <= lineBuff_val_2_V_q1;
        lineBuff_val_2_V_lo_2_reg_659 <= lineBuff_val_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_570 == 1'd1) & (ap_reg_pp0_iter1_exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_2_V_lo_3_reg_670 <= lineBuff_val_2_V_q1;
    end
end

always @ (*) begin
    if ((exitcond1_fu_267_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_assign_phi_fu_214_p4 = idxCol_1_reg_621;
    end else begin
        ap_phi_mux_col_assign_phi_fu_214_p4 = col_assign_reg_210;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_countWait_phi_fu_248_p4 = phitmp_reg_631;
    end else begin
        ap_phi_mux_countWait_phi_fu_248_p4 = countWait_reg_244;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_idxRow_phi_fu_225_p4 = idxRow_1_reg_587;
    end else begin
        ap_phi_mux_idxRow_phi_fu_225_p4 = idxRow_reg_221;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond1_reg_551 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_mux_pixConvolved_phi_fu_236_p4 = pixConvolved_2_reg_626;
    end else begin
        ap_phi_mux_pixConvolved_phi_fu_236_p4 = pixConvolved_reg_232;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_V_V_blk_n = dst_V_V_full_n;
    end else begin
        dst_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        dst_V_V_din = 8'd0;
    end else if (((ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_V_V_din = tmp_V_fu_531_p3;
    end else begin
        dst_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_V_V_write = 1'b1;
    end else begin
        dst_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuff_val_0_V_address0 = tmp_13_0_2_fu_399_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lineBuff_val_0_V_address0 = tmp_5_fu_349_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuff_val_0_V_address0 = tmp_2_reg_555;
    end else begin
        lineBuff_val_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_0_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lineBuff_val_0_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_0_V_we0 = 1'b1;
    end else begin
        lineBuff_val_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_1_V_address0 = lineBuff_val_1_V_ad_reg_560;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_1_V_address0 = tmp_2_fu_273_p1;
        end else begin
            lineBuff_val_1_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_1_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_1_V_we0 = 1'b1;
    end else begin
        lineBuff_val_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_V_address0 = tmp_13_0_1_fu_361_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_2_V_address0 = lineBuff_val_2_V_ad_reg_565;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_2_V_address0 = tmp_2_fu_273_p1;
        end else begin
            lineBuff_val_2_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuff_val_2_V_address1 = tmp_13_0_2_fu_399_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lineBuff_val_2_V_address1 = tmp_5_fu_349_p1;
    end else begin
        lineBuff_val_2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_2_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_2_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_2_V_we0 = 1'b1;
    end else begin
        lineBuff_val_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_551 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_V_V_blk_n = src_V_V_empty_n;
    end else begin
        src_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_V_read = 1'b1;
    end else begin
        src_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_267_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond1_fu_267_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0)) & (exitcond_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_V_0_2_ca_fu_471_p1 = accumulator_V_0_2_reg_676;

assign accumulator_V_0_2_fu_437_p2 = (tmp1_cast_fu_433_p1 + val_V_1_0_1_cast_fu_414_p1);

assign accumulator_V_2_1_fu_489_p2 = (accumulator_V_2_fu_478_p2 - p_shl_cast_fu_459_p1);

assign accumulator_V_2_2_fu_501_p2 = (accumulator_V_2_1_fu_489_p2 - val_V_2_2_cast_fu_468_p1);

assign accumulator_V_2_fu_478_p2 = (accumulator_V_0_2_ca_fu_471_p1 - val_V_2_cast_fu_449_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (dst_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((exitcond1_reg_551 == 1'd0) & (src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((exitcond1_reg_551 == 1'd0) & (src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10 = ((exitcond_fu_539_p2 == 1'd0) & (dst_V_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((exitcond1_reg_551 == 1'd0) & (src_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter2 = ((ap_reg_pp0_iter1_tmp_10_reg_592 == 1'd1) & (dst_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_assign_1_0_2_fu_367_p2 = (32'd2 + ap_phi_mux_pixConvolved_phi_fu_236_p4);

assign countWait_2_fu_545_p2 = (countWait_1_reg_256 + 10'd1);

assign exitcond1_fu_267_p2 = ((ap_phi_mux_countWait_phi_fu_248_p4 == 19'd262145) ? 1'b1 : 1'b0);

assign exitcond_fu_539_p2 = ((countWait_1_reg_256 == 10'd513) ? 1'b1 : 1'b0);

assign icmp1_fu_305_p2 = (($signed(tmp_4_fu_295_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_289_p2 = (($signed(tmp_3_fu_279_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_380_p3 = ((tmp_s_reg_576[0:0] === 1'b1) ? idxCol_reg_582 : 32'd0);

assign idxCol_fu_323_p2 = (32'd1 + ap_phi_mux_col_assign_phi_fu_214_p4);

assign idxRow_1_fu_335_p3 = ((tmp_s_fu_317_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_225_p4 : idxRow_2_fu_329_p2);

assign idxRow_2_fu_329_p2 = (32'd1 + ap_phi_mux_idxRow_phi_fu_225_p4);

assign lineBuff_val_0_V_address1 = tmp_13_0_1_fu_361_p1;

assign or_cond_fu_311_p2 = (icmp_fu_289_p2 & icmp1_fu_305_p2);

assign out_V_1_fu_519_p2 = (8'd0 - out_V_reg_691);

assign out_V_2_fu_524_p3 = ((tmp_12_fu_512_p3[0:0] === 1'b1) ? out_V_1_fu_519_p2 : out_V_reg_691);

assign out_V_fu_507_p2 = (tmp_8_fu_495_p2 - lineBuff_val_2_V_lo_3_reg_670);

assign p_shl_cast_fu_459_p1 = p_shl_fu_452_p3;

assign p_shl_fu_452_p3 = {{lineBuff_val_2_V_lo_2_reg_659}, {1'd0}};

assign phitmp_fu_393_p2 = (countWait_reg_244 + 19'd1);

assign pixConvolved_1_fu_373_p3 = ((or_cond_reg_570[0:0] === 1'b1) ? pixConvolved_3_fu_355_p2 : ap_phi_mux_pixConvolved_phi_fu_236_p4);

assign pixConvolved_2_fu_386_p3 = ((tmp_s_reg_576[0:0] === 1'b1) ? pixConvolved_1_fu_373_p3 : 32'd0);

assign pixConvolved_3_fu_355_p2 = (32'd1 + ap_phi_mux_pixConvolved_phi_fu_236_p4);

assign tmp1_cast_fu_433_p1 = tmp1_fu_427_p2;

assign tmp1_fu_427_p2 = (val_V_0_cast_cast_fu_404_p1 + val_V_0_2_cast_cast_fu_418_p1);

assign tmp2_fu_443_p2 = (lineBuff_val_0_V_q0 + tmp_9_fu_422_p2);

assign tmp_10_fu_343_p2 = ((ap_phi_mux_countWait_phi_fu_248_p4 > 19'd513) ? 1'b1 : 1'b0);

assign tmp_12_fu_512_p3 = accumulator_V_2_2_reg_686[32'd10];

assign tmp_13_0_1_fu_361_p1 = pixConvolved_3_fu_355_p2;

assign tmp_13_0_2_fu_399_p1 = col_assign_1_0_2_reg_606;

assign tmp_1_fu_463_p2 = lineBuff_val_2_V_lo_2_reg_659 << 8'd1;

assign tmp_2_fu_273_p1 = ap_phi_mux_col_assign_phi_fu_214_p4;

assign tmp_3_fu_279_p4 = {{ap_phi_mux_idxRow_phi_fu_225_p4[31:1]}};

assign tmp_4_fu_295_p4 = {{ap_phi_mux_col_assign_phi_fu_214_p4[31:1]}};

assign tmp_5_fu_349_p1 = ap_phi_mux_pixConvolved_phi_fu_236_p4;

assign tmp_6_fu_474_p2 = (tmp2_reg_681 + lineBuff_val_0_V_lo_reg_636);

assign tmp_7_fu_484_p2 = (tmp_6_fu_474_p2 - lineBuff_val_2_V_lo_1_reg_653);

assign tmp_8_fu_495_p2 = (tmp_7_fu_484_p2 - tmp_1_fu_463_p2);

assign tmp_9_fu_422_p2 = lineBuff_val_0_V_lo_1_reg_642 << 8'd1;

assign tmp_V_fu_531_p3 = ((ap_reg_pp0_iter1_or_cond_reg_570[0:0] === 1'b1) ? out_V_2_fu_524_p3 : 8'd0);

assign tmp_s_fu_317_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_214_p4) < $signed(32'd511)) ? 1'b1 : 1'b0);

assign val_V_0_2_cast_cast_fu_418_p1 = lineBuff_val_0_V_q0;

assign val_V_0_cast_cast_fu_404_p1 = lineBuff_val_0_V_lo_reg_636;

assign val_V_1_0_1_cast_fu_414_p1 = val_V_1_0_1_fu_407_p3;

assign val_V_1_0_1_fu_407_p3 = {{lineBuff_val_0_V_lo_1_reg_642}, {1'd0}};

assign val_V_2_2_cast_fu_468_p1 = lineBuff_val_2_V_lo_3_reg_670;

assign val_V_2_cast_fu_449_p1 = lineBuff_val_2_V_lo_1_reg_653;

always @ (posedge ap_clk) begin
    tmp_2_reg_555[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //sobel_y
