-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_V_V_empty_n : IN STD_LOGIC;
    src_V_V_read : OUT STD_LOGIC;
    dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_V_V_full_n : IN STD_LOGIC;
    dst_V_V_write : OUT STD_LOGIC );
end;


architecture behav of sobel_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_40001 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv19_201 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_201 : STD_LOGIC_VECTOR (9 downto 0) := "1000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond1_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_10_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_10_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal countWait_reg_244 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond1_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_555 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_V_ad_reg_560 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ad_reg_565 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal col_assign_1_0_2_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_2_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_393_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal phitmp_reg_631 : STD_LOGIC_VECTOR (18 downto 0);
    signal lineBuff_val_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_V_lo_reg_636 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal lineBuff_val_0_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_V_lo_1_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_1_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_2_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_3_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal accumulator_V_0_2_fu_437_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal accumulator_V_0_2_reg_676 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_2_2_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal accumulator_V_2_2_reg_686 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_V_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_reg_691 : STD_LOGIC_VECTOR (7 downto 0);
    signal countWait_2_fu_545_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal lineBuff_val_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_V_ce0 : STD_LOGIC;
    signal lineBuff_val_0_V_we0 : STD_LOGIC;
    signal lineBuff_val_0_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_V_ce1 : STD_LOGIC;
    signal lineBuff_val_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_V_ce0 : STD_LOGIC;
    signal lineBuff_val_1_V_we0 : STD_LOGIC;
    signal lineBuff_val_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ce0 : STD_LOGIC;
    signal lineBuff_val_2_V_we0 : STD_LOGIC;
    signal lineBuff_val_2_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ce1 : STD_LOGIC;
    signal ap_phi_mux_col_assign_phi_fu_214_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_idxRow_phi_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_pixConvolved_phi_fu_236_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_countWait_phi_fu_248_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal countWait_1_reg_256 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_0_1_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_0_2_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_531_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_279_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_295_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_2_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_3_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_1_0_1_fu_407_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_V_0_cast_cast_fu_404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_V_0_2_cast_cast_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_433_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_V_1_0_1_cast_fu_414_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_452_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal accumulator_V_0_2_ca_fu_471_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal val_V_2_cast_fu_449_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_2_fu_478_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_459_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_2_1_fu_489_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal val_V_2_2_cast_fu_468_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_1_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_2_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component gaussianBlur_linefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_y_lineBuff_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lineBuff_val_0_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_0_V_address0,
        ce0 => lineBuff_val_0_V_ce0,
        we0 => lineBuff_val_0_V_we0,
        d0 => lineBuff_val_1_V_q0,
        q0 => lineBuff_val_0_V_q0,
        address1 => lineBuff_val_0_V_address1,
        ce1 => lineBuff_val_0_V_ce1,
        q1 => lineBuff_val_0_V_q1);

    lineBuff_val_1_V_U : component sobel_y_lineBuff_ncg
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_1_V_address0,
        ce0 => lineBuff_val_1_V_ce0,
        we0 => lineBuff_val_1_V_we0,
        d0 => lineBuff_val_2_V_q0,
        q0 => lineBuff_val_1_V_q0);

    lineBuff_val_2_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_2_V_address0,
        ce0 => lineBuff_val_2_V_ce0,
        we0 => lineBuff_val_2_V_we0,
        d0 => src_V_V_dout,
        q0 => lineBuff_val_2_V_q0,
        address1 => lineBuff_val_2_V_address1,
        ce1 => lineBuff_val_2_V_ce1,
        q1 => lineBuff_val_2_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                col_assign_reg_210 <= idxCol_1_reg_621;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_210 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    countWait_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                countWait_1_reg_256 <= ap_const_lv10_0;
            elsif ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                countWait_1_reg_256 <= countWait_2_fu_545_p2;
            end if; 
        end if;
    end process;

    countWait_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                countWait_reg_244 <= phitmp_reg_631;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                countWait_reg_244 <= ap_const_lv19_1;
            end if; 
        end if;
    end process;

    idxRow_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                idxRow_reg_221 <= idxRow_1_reg_587;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idxRow_reg_221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pixConvolved_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond1_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                pixConvolved_reg_232 <= pixConvolved_2_reg_626;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pixConvolved_reg_232 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_570 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                accumulator_V_0_2_reg_676 <= accumulator_V_0_2_fu_437_p2;
                tmp2_reg_681 <= tmp2_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_570 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                accumulator_V_2_2_reg_686 <= accumulator_V_2_2_fu_501_p2;
                out_V_reg_691 <= out_V_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond1_reg_551 <= exitcond1_reg_551;
                ap_reg_pp0_iter1_or_cond_reg_570 <= or_cond_reg_570;
                ap_reg_pp0_iter1_tmp_10_reg_592 <= tmp_10_reg_592;
                exitcond1_reg_551 <= exitcond1_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_570 = ap_const_lv1_1) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                col_assign_1_0_2_reg_606 <= col_assign_1_0_2_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                idxCol_1_reg_621 <= idxCol_1_fu_380_p3;
                phitmp_reg_631 <= phitmp_fu_393_p2;
                pixConvolved_2_reg_626 <= pixConvolved_2_fu_386_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                idxCol_reg_582 <= idxCol_fu_323_p2;
                lineBuff_val_1_V_ad_reg_560 <= tmp_2_fu_273_p1(9 - 1 downto 0);
                lineBuff_val_2_V_ad_reg_565 <= tmp_2_fu_273_p1(9 - 1 downto 0);
                or_cond_reg_570 <= or_cond_fu_311_p2;
                tmp_10_reg_592 <= tmp_10_fu_343_p2;
                    tmp_2_reg_555(31 downto 0) <= tmp_2_fu_273_p1(31 downto 0);
                tmp_s_reg_576 <= tmp_s_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                idxRow_1_reg_587 <= idxRow_1_fu_335_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond_reg_570 = ap_const_lv1_1) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lineBuff_val_0_V_lo_1_reg_642 <= lineBuff_val_0_V_q1;
                lineBuff_val_0_V_lo_reg_636 <= lineBuff_val_0_V_q0;
                lineBuff_val_2_V_lo_1_reg_653 <= lineBuff_val_2_V_q1;
                lineBuff_val_2_V_lo_2_reg_659 <= lineBuff_val_2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_570 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                lineBuff_val_2_V_lo_3_reg_670 <= lineBuff_val_2_V_q1;
            end if;
        end if;
    end process;
    tmp_2_reg_555(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dst_V_V_full_n, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state10, exitcond_fu_539_p2, exitcond1_fu_267_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_267_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond1_fu_267_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    accumulator_V_0_2_ca_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(accumulator_V_0_2_reg_676),11));
    accumulator_V_0_2_fu_437_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_433_p1) + unsigned(val_V_1_0_1_cast_fu_414_p1));
    accumulator_V_2_1_fu_489_p2 <= std_logic_vector(unsigned(accumulator_V_2_fu_478_p2) - unsigned(p_shl_cast_fu_459_p1));
    accumulator_V_2_2_fu_501_p2 <= std_logic_vector(unsigned(accumulator_V_2_1_fu_489_p2) - unsigned(val_V_2_2_cast_fu_468_p1));
    accumulator_V_2_fu_478_p2 <= std_logic_vector(unsigned(accumulator_V_0_2_ca_fu_471_p1) - unsigned(val_V_2_cast_fu_449_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(dst_V_V_full_n, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_10_reg_592)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dst_V_V_full_n, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_10_reg_592)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dst_V_V_full_n, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_10_reg_592)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(src_V_V_empty_n, ap_enable_reg_pp0_iter0, exitcond1_reg_551)
    begin
                ap_block_pp0_stage1_11001 <= ((exitcond1_reg_551 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(src_V_V_empty_n, ap_enable_reg_pp0_iter0, exitcond1_reg_551)
    begin
                ap_block_pp0_stage1_subdone <= ((exitcond1_reg_551 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(dst_V_V_full_n, exitcond_fu_539_p2)
    begin
                ap_block_state10 <= ((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(src_V_V_empty_n, exitcond1_reg_551)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((exitcond1_reg_551 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter2_assign_proc : process(dst_V_V_full_n, ap_reg_pp0_iter1_tmp_10_reg_592)
    begin
                ap_block_state8_pp0_stage0_iter2 <= ((ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_267_p2)
    begin
        if ((exitcond1_fu_267_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, dst_V_V_full_n, ap_CS_fsm_state10, exitcond_fu_539_p2)
    begin
        if ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_214_p4_assign_proc : process(exitcond1_reg_551, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_assign_reg_210, idxCol_1_reg_621, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_col_assign_phi_fu_214_p4 <= idxCol_1_reg_621;
        else 
            ap_phi_mux_col_assign_phi_fu_214_p4 <= col_assign_reg_210;
        end if; 
    end process;


    ap_phi_mux_countWait_phi_fu_248_p4_assign_proc : process(exitcond1_reg_551, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, countWait_reg_244, phitmp_reg_631, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_countWait_phi_fu_248_p4 <= phitmp_reg_631;
        else 
            ap_phi_mux_countWait_phi_fu_248_p4 <= countWait_reg_244;
        end if; 
    end process;


    ap_phi_mux_idxRow_phi_fu_225_p4_assign_proc : process(exitcond1_reg_551, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, idxRow_reg_221, idxRow_1_reg_587, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_idxRow_phi_fu_225_p4 <= idxRow_1_reg_587;
        else 
            ap_phi_mux_idxRow_phi_fu_225_p4 <= idxRow_reg_221;
        end if; 
    end process;


    ap_phi_mux_pixConvolved_phi_fu_236_p4_assign_proc : process(pixConvolved_reg_232, ap_reg_pp0_iter1_exitcond1_reg_551, ap_CS_fsm_pp0_stage2, pixConvolved_2_reg_626, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((ap_reg_pp0_iter1_exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_pixConvolved_phi_fu_236_p4 <= pixConvolved_2_reg_626;
        else 
            ap_phi_mux_pixConvolved_phi_fu_236_p4 <= pixConvolved_reg_232;
        end if; 
    end process;


    ap_ready_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_state10, exitcond_fu_539_p2)
    begin
        if ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_assign_1_0_2_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(ap_phi_mux_pixConvolved_phi_fu_236_p4));
    countWait_2_fu_545_p2 <= std_logic_vector(unsigned(countWait_1_reg_256) + unsigned(ap_const_lv10_1));

    dst_V_V_blk_n_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_tmp_10_reg_592, ap_CS_fsm_state10, exitcond_fu_539_p2)
    begin
        if ((((exitcond_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dst_V_V_blk_n <= dst_V_V_full_n;
        else 
            dst_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_V_V_din_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_10_reg_592, ap_CS_fsm_state10, exitcond_fu_539_p2, tmp_V_fu_531_p3, ap_block_pp0_stage0_01001)
    begin
        if ((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dst_V_V_din <= ap_const_lv8_0;
        elsif (((ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_V_V_din <= tmp_V_fu_531_p3;
        else 
            dst_V_V_din <= "XXXXXXXX";
        end if; 
    end process;


    dst_V_V_write_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_tmp_10_reg_592, ap_CS_fsm_state10, exitcond_fu_539_p2, ap_block_pp0_stage0_11001)
    begin
        if (((not(((exitcond_fu_539_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_10_reg_592 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dst_V_V_write <= ap_const_logic_1;
        else 
            dst_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_267_p2 <= "1" when (ap_phi_mux_countWait_phi_fu_248_p4 = ap_const_lv19_40001) else "0";
    exitcond_fu_539_p2 <= "1" when (countWait_1_reg_256 = ap_const_lv10_201) else "0";
    icmp1_fu_305_p2 <= "1" when (signed(tmp_4_fu_295_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_289_p2 <= "1" when (signed(tmp_3_fu_279_p4) > signed(ap_const_lv31_0)) else "0";
    idxCol_1_fu_380_p3 <= 
        idxCol_reg_582 when (tmp_s_reg_576(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_323_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_col_assign_phi_fu_214_p4));
    idxRow_1_fu_335_p3 <= 
        ap_phi_mux_idxRow_phi_fu_225_p4 when (tmp_s_fu_317_p2(0) = '1') else 
        idxRow_2_fu_329_p2;
    idxRow_2_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_idxRow_phi_fu_225_p4));

    lineBuff_val_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_2_reg_555, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, tmp_5_fu_349_p1, tmp_13_0_2_fu_399_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuff_val_0_V_address0 <= tmp_13_0_2_fu_399_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lineBuff_val_0_V_address0 <= tmp_5_fu_349_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lineBuff_val_0_V_address0 <= tmp_2_reg_555(9 - 1 downto 0);
        else 
            lineBuff_val_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    lineBuff_val_0_V_address1 <= tmp_13_0_1_fu_361_p1(9 - 1 downto 0);

    lineBuff_val_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            lineBuff_val_0_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            lineBuff_val_0_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond1_reg_551, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond1_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_0_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_2_fu_273_p1, lineBuff_val_1_V_ad_reg_560)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_1_V_address0 <= lineBuff_val_1_V_ad_reg_560;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_1_V_address0 <= tmp_2_fu_273_p1(9 - 1 downto 0);
            else 
                lineBuff_val_1_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            lineBuff_val_1_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond1_reg_551, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond1_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_1_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_2_fu_273_p1, lineBuff_val_2_V_ad_reg_565, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_13_0_1_fu_361_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_2_V_address0 <= tmp_13_0_1_fu_361_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_2_V_address0 <= lineBuff_val_2_V_ad_reg_565;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_2_V_address0 <= tmp_2_fu_273_p1(9 - 1 downto 0);
            else 
                lineBuff_val_2_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, tmp_5_fu_349_p1, tmp_13_0_2_fu_399_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            lineBuff_val_2_V_address1 <= tmp_13_0_2_fu_399_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lineBuff_val_2_V_address1 <= tmp_5_fu_349_p1(9 - 1 downto 0);
        else 
            lineBuff_val_2_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            lineBuff_val_2_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_2_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond1_reg_551, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond1_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_2_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_311_p2 <= (icmp_fu_289_p2 and icmp1_fu_305_p2);
    out_V_1_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(out_V_reg_691));
    out_V_2_fu_524_p3 <= 
        out_V_1_fu_519_p2 when (tmp_12_fu_512_p3(0) = '1') else 
        out_V_reg_691;
    out_V_fu_507_p2 <= std_logic_vector(unsigned(tmp_8_fu_495_p2) - unsigned(lineBuff_val_2_V_lo_3_reg_670));
    p_shl_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_452_p3),11));
    p_shl_fu_452_p3 <= (lineBuff_val_2_V_lo_2_reg_659 & ap_const_lv1_0);
    phitmp_fu_393_p2 <= std_logic_vector(unsigned(countWait_reg_244) + unsigned(ap_const_lv19_1));
    pixConvolved_1_fu_373_p3 <= 
        pixConvolved_3_fu_355_p2 when (or_cond_reg_570(0) = '1') else 
        ap_phi_mux_pixConvolved_phi_fu_236_p4;
    pixConvolved_2_fu_386_p3 <= 
        pixConvolved_1_fu_373_p3 when (tmp_s_reg_576(0) = '1') else 
        ap_const_lv32_0;
    pixConvolved_3_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_pixConvolved_phi_fu_236_p4));

    src_V_V_blk_n_assign_proc : process(src_V_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond1_reg_551)
    begin
        if (((exitcond1_reg_551 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_V_V_blk_n <= src_V_V_empty_n;
        else 
            src_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond1_reg_551, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond1_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            src_V_V_read <= ap_const_logic_1;
        else 
            src_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_427_p2),10));
    tmp1_fu_427_p2 <= std_logic_vector(unsigned(val_V_0_cast_cast_fu_404_p1) + unsigned(val_V_0_2_cast_cast_fu_418_p1));
    tmp2_fu_443_p2 <= std_logic_vector(unsigned(lineBuff_val_0_V_q0) + unsigned(tmp_9_fu_422_p2));
    tmp_10_fu_343_p2 <= "1" when (unsigned(ap_phi_mux_countWait_phi_fu_248_p4) > unsigned(ap_const_lv19_201)) else "0";
    tmp_12_fu_512_p3 <= accumulator_V_2_2_reg_686(10 downto 10);
    tmp_13_0_1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixConvolved_3_fu_355_p2),64));
    tmp_13_0_2_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_0_2_reg_606),64));
    tmp_1_fu_463_p2 <= std_logic_vector(shift_left(unsigned(lineBuff_val_2_V_lo_2_reg_659),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_214_p4),64));
    tmp_3_fu_279_p4 <= ap_phi_mux_idxRow_phi_fu_225_p4(31 downto 1);
    tmp_4_fu_295_p4 <= ap_phi_mux_col_assign_phi_fu_214_p4(31 downto 1);
    tmp_5_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_pixConvolved_phi_fu_236_p4),64));
    tmp_6_fu_474_p2 <= std_logic_vector(unsigned(tmp2_reg_681) + unsigned(lineBuff_val_0_V_lo_reg_636));
    tmp_7_fu_484_p2 <= std_logic_vector(unsigned(tmp_6_fu_474_p2) - unsigned(lineBuff_val_2_V_lo_1_reg_653));
    tmp_8_fu_495_p2 <= std_logic_vector(unsigned(tmp_7_fu_484_p2) - unsigned(tmp_1_fu_463_p2));
    tmp_9_fu_422_p2 <= std_logic_vector(shift_left(unsigned(lineBuff_val_0_V_lo_1_reg_642),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_V_fu_531_p3 <= 
        out_V_2_fu_524_p3 when (ap_reg_pp0_iter1_or_cond_reg_570(0) = '1') else 
        ap_const_lv8_0;
    tmp_s_fu_317_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_214_p4) < signed(ap_const_lv32_1FF)) else "0";
    val_V_0_2_cast_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_V_q0),9));
    val_V_0_cast_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_V_lo_reg_636),9));
    val_V_1_0_1_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_1_0_1_fu_407_p3),10));
    val_V_1_0_1_fu_407_p3 <= (lineBuff_val_0_V_lo_1_reg_642 & ap_const_lv1_0);
    val_V_2_2_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_V_lo_3_reg_670),11));
    val_V_2_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_V_lo_1_reg_653),11));
end behav;
