// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Mem2Stream.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Mem2Stream::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Mem2Stream::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> Mem2Stream::ap_ST_fsm_state1 = "1";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state2 = "10";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state3 = "100";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state4 = "1000";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state5 = "10000";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state6 = "100000";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> Mem2Stream::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<10> Mem2Stream::ap_ST_fsm_state12 = "1000000000";
const bool Mem2Stream::ap_const_boolean_1 = true;
const sc_lv<32> Mem2Stream::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Mem2Stream::ap_const_lv1_0 = "0";
const sc_lv<3> Mem2Stream::ap_const_lv3_0 = "000";
const sc_lv<2> Mem2Stream::ap_const_lv2_0 = "00";
const sc_lv<4> Mem2Stream::ap_const_lv4_0 = "0000";
const sc_lv<32> Mem2Stream::ap_const_lv32_1 = "1";
const sc_lv<32> Mem2Stream::ap_const_lv32_8 = "1000";
const bool Mem2Stream::ap_const_boolean_0 = false;
const sc_lv<32> Mem2Stream::ap_const_lv32_7 = "111";
const sc_lv<1> Mem2Stream::ap_const_lv1_1 = "1";
const sc_lv<23> Mem2Stream::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> Mem2Stream::ap_const_lv32_400000 = "10000000000000000000000";
const sc_lv<23> Mem2Stream::ap_const_lv23_400000 = "10000000000000000000000";
const sc_lv<23> Mem2Stream::ap_const_lv23_1 = "1";
const sc_lv<32> Mem2Stream::ap_const_lv32_9 = "1001";

Mem2Stream::Mem2Stream(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( m_axi_in_V_RVALID );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_in_V_RVALID );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_in_V_RVALID );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( m_axi_in_V_RVALID );
    sensitive << ( tmp_reg_156 );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( tmp_fu_138_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_in_V_ARREADY);
    sensitive << ( m_axi_in_V_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_in_V_ARREADY );

    SC_METHOD(thread_i_7_fu_144_p2);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_in_V_blk_n_AR);
    sensitive << ( m_axi_in_V_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_V_blk_n_R);
    sensitive << ( m_axi_in_V_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_156 );

    SC_METHOD(thread_m_axi_in_V_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( in_V_addr_reg_150 );
    sensitive << ( ap_reg_ioackin_m_axi_in_V_ARREADY );

    SC_METHOD(thread_m_axi_in_V_ARBURST);

    SC_METHOD(thread_m_axi_in_V_ARCACHE);

    SC_METHOD(thread_m_axi_in_V_ARID);

    SC_METHOD(thread_m_axi_in_V_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_in_V_ARREADY );

    SC_METHOD(thread_m_axi_in_V_ARLOCK);

    SC_METHOD(thread_m_axi_in_V_ARPROT);

    SC_METHOD(thread_m_axi_in_V_ARQOS);

    SC_METHOD(thread_m_axi_in_V_ARREGION);

    SC_METHOD(thread_m_axi_in_V_ARSIZE);

    SC_METHOD(thread_m_axi_in_V_ARUSER);

    SC_METHOD(thread_m_axi_in_V_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_in_V_ARREADY );

    SC_METHOD(thread_m_axi_in_V_AWADDR);

    SC_METHOD(thread_m_axi_in_V_AWBURST);

    SC_METHOD(thread_m_axi_in_V_AWCACHE);

    SC_METHOD(thread_m_axi_in_V_AWID);

    SC_METHOD(thread_m_axi_in_V_AWLEN);

    SC_METHOD(thread_m_axi_in_V_AWLOCK);

    SC_METHOD(thread_m_axi_in_V_AWPROT);

    SC_METHOD(thread_m_axi_in_V_AWQOS);

    SC_METHOD(thread_m_axi_in_V_AWREGION);

    SC_METHOD(thread_m_axi_in_V_AWSIZE);

    SC_METHOD(thread_m_axi_in_V_AWUSER);

    SC_METHOD(thread_m_axi_in_V_AWVALID);

    SC_METHOD(thread_m_axi_in_V_BREADY);

    SC_METHOD(thread_m_axi_in_V_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_156 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_in_V_WDATA);

    SC_METHOD(thread_m_axi_in_V_WID);

    SC_METHOD(thread_m_axi_in_V_WLAST);

    SC_METHOD(thread_m_axi_in_V_WSTRB);

    SC_METHOD(thread_m_axi_in_V_WUSER);

    SC_METHOD(thread_m_axi_in_V_WVALID);

    SC_METHOD(thread_out_V_V_blk_n);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );
    sensitive << ( e_V_reg_165 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_156 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_sext_cast_fu_118_p1);
    sensitive << ( in_V_offset );

    SC_METHOD(thread_sum2_cast_fu_128_p1);
    sensitive << ( sum2_fu_122_p2 );

    SC_METHOD(thread_sum2_fu_122_p2);
    sensitive << ( tmp_20_cast_fu_114_p1 );
    sensitive << ( sext_cast_fu_118_p1 );

    SC_METHOD(thread_tmp_20_cast_fu_114_p1);
    sensitive << ( in_V_offset1 );

    SC_METHOD(thread_tmp_fu_138_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_103 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_fu_138_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_sig_ioackin_m_axi_in_V_ARREADY );

    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_in_V_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Mem2Stream_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_in_V_AWVALID, "(port)m_axi_in_V_AWVALID");
    sc_trace(mVcdFile, m_axi_in_V_AWREADY, "(port)m_axi_in_V_AWREADY");
    sc_trace(mVcdFile, m_axi_in_V_AWADDR, "(port)m_axi_in_V_AWADDR");
    sc_trace(mVcdFile, m_axi_in_V_AWID, "(port)m_axi_in_V_AWID");
    sc_trace(mVcdFile, m_axi_in_V_AWLEN, "(port)m_axi_in_V_AWLEN");
    sc_trace(mVcdFile, m_axi_in_V_AWSIZE, "(port)m_axi_in_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_in_V_AWBURST, "(port)m_axi_in_V_AWBURST");
    sc_trace(mVcdFile, m_axi_in_V_AWLOCK, "(port)m_axi_in_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_in_V_AWCACHE, "(port)m_axi_in_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_in_V_AWPROT, "(port)m_axi_in_V_AWPROT");
    sc_trace(mVcdFile, m_axi_in_V_AWQOS, "(port)m_axi_in_V_AWQOS");
    sc_trace(mVcdFile, m_axi_in_V_AWREGION, "(port)m_axi_in_V_AWREGION");
    sc_trace(mVcdFile, m_axi_in_V_AWUSER, "(port)m_axi_in_V_AWUSER");
    sc_trace(mVcdFile, m_axi_in_V_WVALID, "(port)m_axi_in_V_WVALID");
    sc_trace(mVcdFile, m_axi_in_V_WREADY, "(port)m_axi_in_V_WREADY");
    sc_trace(mVcdFile, m_axi_in_V_WDATA, "(port)m_axi_in_V_WDATA");
    sc_trace(mVcdFile, m_axi_in_V_WSTRB, "(port)m_axi_in_V_WSTRB");
    sc_trace(mVcdFile, m_axi_in_V_WLAST, "(port)m_axi_in_V_WLAST");
    sc_trace(mVcdFile, m_axi_in_V_WID, "(port)m_axi_in_V_WID");
    sc_trace(mVcdFile, m_axi_in_V_WUSER, "(port)m_axi_in_V_WUSER");
    sc_trace(mVcdFile, m_axi_in_V_ARVALID, "(port)m_axi_in_V_ARVALID");
    sc_trace(mVcdFile, m_axi_in_V_ARREADY, "(port)m_axi_in_V_ARREADY");
    sc_trace(mVcdFile, m_axi_in_V_ARADDR, "(port)m_axi_in_V_ARADDR");
    sc_trace(mVcdFile, m_axi_in_V_ARID, "(port)m_axi_in_V_ARID");
    sc_trace(mVcdFile, m_axi_in_V_ARLEN, "(port)m_axi_in_V_ARLEN");
    sc_trace(mVcdFile, m_axi_in_V_ARSIZE, "(port)m_axi_in_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_in_V_ARBURST, "(port)m_axi_in_V_ARBURST");
    sc_trace(mVcdFile, m_axi_in_V_ARLOCK, "(port)m_axi_in_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_in_V_ARCACHE, "(port)m_axi_in_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_in_V_ARPROT, "(port)m_axi_in_V_ARPROT");
    sc_trace(mVcdFile, m_axi_in_V_ARQOS, "(port)m_axi_in_V_ARQOS");
    sc_trace(mVcdFile, m_axi_in_V_ARREGION, "(port)m_axi_in_V_ARREGION");
    sc_trace(mVcdFile, m_axi_in_V_ARUSER, "(port)m_axi_in_V_ARUSER");
    sc_trace(mVcdFile, m_axi_in_V_RVALID, "(port)m_axi_in_V_RVALID");
    sc_trace(mVcdFile, m_axi_in_V_RREADY, "(port)m_axi_in_V_RREADY");
    sc_trace(mVcdFile, m_axi_in_V_RDATA, "(port)m_axi_in_V_RDATA");
    sc_trace(mVcdFile, m_axi_in_V_RLAST, "(port)m_axi_in_V_RLAST");
    sc_trace(mVcdFile, m_axi_in_V_RID, "(port)m_axi_in_V_RID");
    sc_trace(mVcdFile, m_axi_in_V_RUSER, "(port)m_axi_in_V_RUSER");
    sc_trace(mVcdFile, m_axi_in_V_RRESP, "(port)m_axi_in_V_RRESP");
    sc_trace(mVcdFile, m_axi_in_V_BVALID, "(port)m_axi_in_V_BVALID");
    sc_trace(mVcdFile, m_axi_in_V_BREADY, "(port)m_axi_in_V_BREADY");
    sc_trace(mVcdFile, m_axi_in_V_BRESP, "(port)m_axi_in_V_BRESP");
    sc_trace(mVcdFile, m_axi_in_V_BID, "(port)m_axi_in_V_BID");
    sc_trace(mVcdFile, m_axi_in_V_BUSER, "(port)m_axi_in_V_BUSER");
    sc_trace(mVcdFile, in_V_offset, "(port)in_V_offset");
    sc_trace(mVcdFile, in_V_offset1, "(port)in_V_offset1");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_blk_n_AR, "in_V_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, in_V_blk_n_R, "in_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_reg_156, "tmp_reg_156");
    sc_trace(mVcdFile, out_V_V_blk_n, "out_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_reg_156, "ap_reg_pp0_iter1_tmp_reg_156");
    sc_trace(mVcdFile, i_reg_103, "i_reg_103");
    sc_trace(mVcdFile, in_V_addr_reg_150, "in_V_addr_reg_150");
    sc_trace(mVcdFile, tmp_fu_138_p2, "tmp_fu_138_p2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_7_fu_144_p2, "i_7_fu_144_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, e_V_reg_165, "e_V_reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, sum2_cast_fu_128_p1, "sum2_cast_fu_128_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_in_V_ARREADY, "ap_reg_ioackin_m_axi_in_V_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_in_V_ARREADY, "ap_sig_ioackin_m_axi_in_V_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_20_cast_fu_114_p1, "tmp_20_cast_fu_114_p1");
    sc_trace(mVcdFile, sext_cast_fu_118_p1, "sext_cast_fu_118_p1");
    sc_trace(mVcdFile, sum2_fu_122_p2, "sum2_fu_122_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Mem2Stream::~Mem2Stream() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Mem2Stream::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_in_V_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_in_V_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_in_V_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_in_V_ARREADY.read())) {
                ap_reg_ioackin_m_axi_in_V_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_138_p2.read()))) {
        i_reg_103 = i_7_fu_144_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_reg_103 = ap_const_lv23_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_tmp_reg_156 = tmp_reg_156.read();
        tmp_reg_156 = tmp_fu_138_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        e_V_reg_165 = m_axi_in_V_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in_V_addr_reg_150 =  (sc_lv<32>) (sum2_cast_fu_128_p1.read());
    }
}

void Mem2Stream::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void Mem2Stream::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Mem2Stream::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void Mem2Stream::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Mem2Stream::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Mem2Stream::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mem2Stream::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_V_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read())));
}

void Mem2Stream::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_V_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read())));
}

void Mem2Stream::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_V_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_156.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read())));
}

void Mem2Stream::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_V_RVALID.read()));
}

void Mem2Stream::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_156.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()));
}

void Mem2Stream::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mem2Stream::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(tmp_fu_138_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void Mem2Stream::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Mem2Stream::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Mem2Stream::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Mem2Stream::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Mem2Stream::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Mem2Stream::thread_ap_sig_ioackin_m_axi_in_V_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_in_V_ARREADY.read())) {
        ap_sig_ioackin_m_axi_in_V_ARREADY = m_axi_in_V_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_in_V_ARREADY = ap_const_logic_1;
    }
}

void Mem2Stream::thread_i_7_fu_144_p2() {
    i_7_fu_144_p2 = (!i_reg_103.read().is_01() || !ap_const_lv23_1.is_01())? sc_lv<23>(): (sc_biguint<23>(i_reg_103.read()) + sc_biguint<23>(ap_const_lv23_1));
}

void Mem2Stream::thread_in_V_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_V_blk_n_AR = m_axi_in_V_ARREADY.read();
    } else {
        in_V_blk_n_AR = ap_const_logic_1;
    }
}

void Mem2Stream::thread_in_V_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()))) {
        in_V_blk_n_R = m_axi_in_V_RVALID.read();
    } else {
        in_V_blk_n_R = ap_const_logic_1;
    }
}

void Mem2Stream::thread_m_axi_in_V_ARADDR() {
    m_axi_in_V_ARADDR = in_V_addr_reg_150.read();
}

void Mem2Stream::thread_m_axi_in_V_ARBURST() {
    m_axi_in_V_ARBURST = ap_const_lv2_0;
}

void Mem2Stream::thread_m_axi_in_V_ARCACHE() {
    m_axi_in_V_ARCACHE = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_ARID() {
    m_axi_in_V_ARID = ap_const_lv1_0;
}

void Mem2Stream::thread_m_axi_in_V_ARLEN() {
    m_axi_in_V_ARLEN = ap_const_lv32_400000;
}

void Mem2Stream::thread_m_axi_in_V_ARLOCK() {
    m_axi_in_V_ARLOCK = ap_const_lv2_0;
}

void Mem2Stream::thread_m_axi_in_V_ARPROT() {
    m_axi_in_V_ARPROT = ap_const_lv3_0;
}

void Mem2Stream::thread_m_axi_in_V_ARQOS() {
    m_axi_in_V_ARQOS = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_ARREGION() {
    m_axi_in_V_ARREGION = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_ARSIZE() {
    m_axi_in_V_ARSIZE = ap_const_lv3_0;
}

void Mem2Stream::thread_m_axi_in_V_ARUSER() {
    m_axi_in_V_ARUSER = ap_const_lv1_0;
}

void Mem2Stream::thread_m_axi_in_V_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_in_V_ARREADY.read()))) {
        m_axi_in_V_ARVALID = ap_const_logic_1;
    } else {
        m_axi_in_V_ARVALID = ap_const_logic_0;
    }
}

void Mem2Stream::thread_m_axi_in_V_AWADDR() {
    m_axi_in_V_AWADDR = ap_const_lv32_0;
}

void Mem2Stream::thread_m_axi_in_V_AWBURST() {
    m_axi_in_V_AWBURST = ap_const_lv2_0;
}

void Mem2Stream::thread_m_axi_in_V_AWCACHE() {
    m_axi_in_V_AWCACHE = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_AWID() {
    m_axi_in_V_AWID = ap_const_lv1_0;
}

void Mem2Stream::thread_m_axi_in_V_AWLEN() {
    m_axi_in_V_AWLEN = ap_const_lv32_0;
}

void Mem2Stream::thread_m_axi_in_V_AWLOCK() {
    m_axi_in_V_AWLOCK = ap_const_lv2_0;
}

void Mem2Stream::thread_m_axi_in_V_AWPROT() {
    m_axi_in_V_AWPROT = ap_const_lv3_0;
}

void Mem2Stream::thread_m_axi_in_V_AWQOS() {
    m_axi_in_V_AWQOS = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_AWREGION() {
    m_axi_in_V_AWREGION = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_AWSIZE() {
    m_axi_in_V_AWSIZE = ap_const_lv3_0;
}

void Mem2Stream::thread_m_axi_in_V_AWUSER() {
    m_axi_in_V_AWUSER = ap_const_lv1_0;
}

void Mem2Stream::thread_m_axi_in_V_AWVALID() {
    m_axi_in_V_AWVALID = ap_const_logic_0;
}

void Mem2Stream::thread_m_axi_in_V_BREADY() {
    m_axi_in_V_BREADY = ap_const_logic_0;
}

void Mem2Stream::thread_m_axi_in_V_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_156.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_in_V_RREADY = ap_const_logic_1;
    } else {
        m_axi_in_V_RREADY = ap_const_logic_0;
    }
}

void Mem2Stream::thread_m_axi_in_V_WDATA() {
    m_axi_in_V_WDATA = ap_const_lv32_0;
}

void Mem2Stream::thread_m_axi_in_V_WID() {
    m_axi_in_V_WID = ap_const_lv1_0;
}

void Mem2Stream::thread_m_axi_in_V_WLAST() {
    m_axi_in_V_WLAST = ap_const_logic_0;
}

void Mem2Stream::thread_m_axi_in_V_WSTRB() {
    m_axi_in_V_WSTRB = ap_const_lv4_0;
}

void Mem2Stream::thread_m_axi_in_V_WUSER() {
    m_axi_in_V_WUSER = ap_const_lv1_0;
}

void Mem2Stream::thread_m_axi_in_V_WVALID() {
    m_axi_in_V_WVALID = ap_const_logic_0;
}

void Mem2Stream::thread_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_156.read()))) {
        out_V_V_blk_n = out_V_V_full_n.read();
    } else {
        out_V_V_blk_n = ap_const_logic_1;
    }
}

void Mem2Stream::thread_out_V_V_din() {
    out_V_V_din = e_V_reg_165.read();
}

void Mem2Stream::thread_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_156.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_V_write = ap_const_logic_1;
    } else {
        out_V_V_write = ap_const_logic_0;
    }
}

void Mem2Stream::thread_sext_cast_fu_118_p1() {
    sext_cast_fu_118_p1 = esl_zext<33,30>(in_V_offset.read());
}

void Mem2Stream::thread_sum2_cast_fu_128_p1() {
    sum2_cast_fu_128_p1 = esl_zext<64,33>(sum2_fu_122_p2.read());
}

void Mem2Stream::thread_sum2_fu_122_p2() {
    sum2_fu_122_p2 = (!tmp_20_cast_fu_114_p1.read().is_01() || !sext_cast_fu_118_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(tmp_20_cast_fu_114_p1.read()) + sc_biguint<33>(sext_cast_fu_118_p1.read()));
}

void Mem2Stream::thread_tmp_20_cast_fu_114_p1() {
    tmp_20_cast_fu_114_p1 = esl_zext<33,32>(in_V_offset1.read());
}

void Mem2Stream::thread_tmp_fu_138_p2() {
    tmp_fu_138_p2 = (!i_reg_103.read().is_01() || !ap_const_lv23_400000.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_103.read() == ap_const_lv23_400000);
}

void Mem2Stream::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_in_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_138_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(tmp_fu_138_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

}

