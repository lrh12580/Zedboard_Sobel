// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gaussianBlur (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_V_V_dout,
        src_V_V_empty_n,
        src_V_V_read,
        dst_x_V_V_din,
        dst_x_V_V_full_n,
        dst_x_V_V_write,
        dst_y_V_V_din,
        dst_y_V_V_full_n,
        dst_y_V_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_state10 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_V_V_dout;
input   src_V_V_empty_n;
output   src_V_V_read;
output  [7:0] dst_x_V_V_din;
input   dst_x_V_V_full_n;
output   dst_x_V_V_write;
output  [7:0] dst_y_V_V_din;
input   dst_y_V_V_full_n;
output   dst_y_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_V_V_read;
reg[7:0] dst_x_V_V_din;
reg dst_x_V_V_write;
reg[7:0] dst_y_V_V_din;
reg dst_y_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond3_reg_842;
reg    dst_x_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_23_reg_883;
reg   [0:0] ap_reg_pp0_iter1_tmp_23_reg_883;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond_fu_813_p2;
reg    dst_y_V_V_blk_n;
reg   [31:0] col_assign_reg_285;
reg   [31:0] idxRow_reg_296;
reg   [31:0] pixConvolved_reg_307;
reg   [18:0] countWait_reg_319;
wire   [0:0] exitcond2_fu_342_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_2_fu_348_p2;
wire   [0:0] exitcond3_fu_354_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond3_reg_842;
wire   [63:0] tmp_s_fu_360_p1;
reg   [63:0] tmp_s_reg_846;
reg   [8:0] lineBuff_val_1_V_ad_reg_851;
reg   [8:0] lineBuff_val_2_V_ad_reg_856;
wire   [0:0] or_cond_fu_398_p2;
reg   [0:0] or_cond_reg_861;
reg   [0:0] ap_reg_pp0_iter1_or_cond_reg_861;
wire   [0:0] tmp_21_fu_404_p2;
reg   [0:0] tmp_21_reg_867;
wire   [31:0] idxCol_fu_410_p2;
reg   [31:0] idxCol_reg_873;
wire   [31:0] idxRow_1_fu_422_p3;
reg   [31:0] idxRow_1_reg_878;
wire   [0:0] tmp_23_fu_430_p2;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] tmp_118_0_1_fu_449_p1;
reg   [63:0] tmp_118_0_1_reg_892;
wire   [63:0] tmp_118_0_2_fu_461_p1;
reg   [63:0] tmp_118_0_2_reg_897;
wire   [31:0] idxCol_1_fu_473_p3;
reg   [31:0] idxCol_1_reg_928;
wire   [31:0] pixConvolved_2_fu_479_p3;
reg   [31:0] pixConvolved_2_reg_933;
wire   [18:0] phitmp_fu_486_p2;
reg   [18:0] phitmp_reg_938;
wire   [7:0] lineBuff_val_0_V_q0;
reg   [7:0] lineBuff_val_0_V_lo_reg_943;
reg    ap_enable_reg_pp0_iter1;
wire   [7:0] lineBuff_val_0_V_q1;
reg   [7:0] lineBuff_val_0_V_lo_5_reg_954;
wire   [7:0] lineBuff_val_1_V_q1;
reg   [7:0] lineBuff_val_1_V_lo_3_reg_960;
wire   [7:0] lineBuff_val_1_V_q0;
reg   [7:0] lineBuff_val_1_V_lo_4_reg_966;
wire   [7:0] lineBuff_val_2_V_q1;
reg   [7:0] lineBuff_val_2_V_lo_6_reg_976;
wire   [7:0] lineBuff_val_2_V_q0;
reg   [7:0] lineBuff_val_2_V_lo_7_reg_982;
wire   [13:0] tmp2_fu_701_p2;
reg   [13:0] tmp2_reg_993;
reg    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [13:0] tmp3_fu_707_p2;
reg   [13:0] tmp3_reg_998;
wire   [14:0] grp_fu_825_p3;
reg   [14:0] tmp5_reg_1003;
wire   [13:0] tmp7_fu_713_p2;
reg   [13:0] tmp7_reg_1008;
reg   [7:0] out_x_V_reg_1013;
wire   [9:0] countWait_4_fu_819_p2;
reg    ap_block_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage2_subdone;
reg   [8:0] lineBuff_val_0_V_address0;
reg    lineBuff_val_0_V_ce0;
reg    lineBuff_val_0_V_we0;
wire   [8:0] lineBuff_val_0_V_address1;
reg    lineBuff_val_0_V_ce1;
reg   [8:0] lineBuff_val_1_V_address0;
reg    lineBuff_val_1_V_ce0;
reg    lineBuff_val_1_V_we0;
reg   [8:0] lineBuff_val_1_V_address1;
reg    lineBuff_val_1_V_ce1;
reg   [8:0] lineBuff_val_2_V_address0;
reg    lineBuff_val_2_V_ce0;
reg    lineBuff_val_2_V_we0;
reg   [8:0] lineBuff_val_2_V_address1;
reg    lineBuff_val_2_V_ce1;
reg   [3:0] i_reg_274;
reg    ap_block_state1;
reg   [31:0] ap_phi_mux_col_assign_phi_fu_289_p4;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_300_p4;
reg   [31:0] ap_phi_mux_pixConvolved_phi_fu_311_p4;
wire    ap_block_pp0_stage2;
reg   [18:0] ap_phi_mux_countWait_phi_fu_323_p4;
reg   [9:0] countWait_1_reg_331;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_20_fu_436_p1;
wire   [7:0] tmp_V_fu_805_p3;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] tmp_39_fu_366_p4;
wire   [30:0] tmp_40_fu_382_p4;
wire   [0:0] icmp_fu_376_p2;
wire   [0:0] icmp3_fu_392_p2;
wire   [31:0] idxRow_4_fu_416_p2;
wire   [31:0] pixConvolved_5_fu_443_p2;
wire   [31:0] col_assign_7_0_2_fu_455_p2;
wire   [31:0] pixConvolved_1_fu_466_p3;
wire   [12:0] tmp_fu_492_p3;
wire   [10:0] tmp_22_fu_503_p3;
wire   [13:0] p_shl1_fu_499_p1;
wire   [13:0] p_shl2_fu_510_p1;
wire   [12:0] tmp_25_fu_520_p3;
wire   [8:0] tmp_26_fu_532_p3;
wire   [13:0] p_shl3_fu_528_p1;
wire   [13:0] p_shl4_fu_540_p1;
wire   [12:0] tmp_27_fu_550_p3;
wire   [10:0] tmp_28_fu_561_p3;
wire   [13:0] p_shl5_fu_557_p1;
wire   [13:0] p_shl6_fu_568_p1;
wire   [12:0] tmp_29_fu_578_p3;
wire   [8:0] tmp_30_fu_589_p3;
wire   [13:0] p_shl7_fu_585_p1;
wire   [13:0] p_shl8_fu_596_p1;
wire   [12:0] tmp_31_fu_609_p3;
wire   [8:0] tmp_32_fu_621_p3;
wire   [13:0] p_shl9_fu_617_p1;
wire   [13:0] p_shl10_fu_629_p1;
wire   [13:0] val_V_3_1_2_fu_633_p2;
wire   [12:0] tmp_35_fu_643_p3;
wire   [8:0] tmp_36_fu_654_p3;
wire   [13:0] p_shl13_fu_650_p1;
wire   [13:0] p_shl14_fu_661_p1;
wire   [12:0] tmp_37_fu_671_p3;
wire   [10:0] tmp_38_fu_683_p3;
wire   [13:0] p_shl_fu_679_p1;
wire   [13:0] p_shl15_fu_691_p1;
wire   [13:0] val_V_3_fu_514_p2;
wire   [13:0] val_V_3_0_1_fu_544_p2;
wire   [13:0] val_V_3_0_2_fu_572_p2;
wire   [13:0] val_V_3_1_fu_600_p2;
wire   [13:0] val_V_3_2_1_fu_665_p2;
wire   [13:0] val_V_3_2_2_fu_695_p2;
wire   [12:0] tmp_33_fu_719_p3;
wire   [10:0] tmp_34_fu_730_p3;
wire   [13:0] p_shl11_fu_726_p1;
wire   [13:0] p_shl12_fu_737_p1;
wire   [13:0] val_V_3_2_fu_741_p2;
wire   [14:0] tmp3_cast_fu_754_p1;
wire   [14:0] tmp2_cast_fu_751_p1;
wire   [14:0] tmp1_fu_757_p2;
wire   [14:0] tmp7_cast_fu_770_p1;
wire   [14:0] val_V_3_2_cast_fu_747_p1;
wire   [14:0] tmp6_fu_773_p2;
wire   [15:0] tmp6_cast_fu_779_p1;
wire   [15:0] tmp5_cast_fu_767_p1;
wire   [15:0] tmp4_fu_783_p2;
wire   [15:0] tmp1_cast_fu_763_p1;
wire   [15:0] accumulator_V_2_2_fu_789_p2;
wire   [7:0] grp_fu_825_p0;
wire   [6:0] grp_fu_825_p1;
wire   [13:0] grp_fu_825_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [14:0] grp_fu_825_p00;
wire   [14:0] grp_fu_825_p20;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_0_V_address0),
    .ce0(lineBuff_val_0_V_ce0),
    .we0(lineBuff_val_0_V_we0),
    .d0(lineBuff_val_1_V_q0),
    .q0(lineBuff_val_0_V_q0),
    .address1(lineBuff_val_0_V_address1),
    .ce1(lineBuff_val_0_V_ce1),
    .q1(lineBuff_val_0_V_q1)
);

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_1_V_address0),
    .ce0(lineBuff_val_1_V_ce0),
    .we0(lineBuff_val_1_V_we0),
    .d0(lineBuff_val_2_V_q0),
    .q0(lineBuff_val_1_V_q0),
    .address1(lineBuff_val_1_V_address1),
    .ce1(lineBuff_val_1_V_ce1),
    .q1(lineBuff_val_1_V_q1)
);

gaussianBlur_linefYi #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_2_V_address0),
    .ce0(lineBuff_val_2_V_ce0),
    .we0(lineBuff_val_2_V_we0),
    .d0(src_V_V_dout),
    .q0(lineBuff_val_2_V_q0),
    .address1(lineBuff_val_2_V_address1),
    .ce1(lineBuff_val_2_V_ce1),
    .q1(lineBuff_val_2_V_q1)
);

image_filter_mac_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 15 ))
image_filter_mac_ibs_U29(
    .din0(grp_fu_825_p0),
    .din1(grp_fu_825_p1),
    .din2(grp_fu_825_p2),
    .dout(grp_fu_825_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_285 <= idxCol_1_reg_928;
    end else if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_assign_reg_285 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        countWait_1_reg_331 <= 10'd0;
    end else if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        countWait_1_reg_331 <= countWait_4_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        countWait_reg_319 <= phitmp_reg_938;
    end else if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        countWait_reg_319 <= 19'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_274 <= i_2_fu_348_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_274 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_reg_296 <= idxRow_1_reg_878;
    end else if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        idxRow_reg_296 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond3_reg_842 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixConvolved_reg_307 <= pixConvolved_2_reg_933;
    end else if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        pixConvolved_reg_307 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond3_reg_842 <= exitcond3_reg_842;
        ap_reg_pp0_iter1_or_cond_reg_861 <= or_cond_reg_861;
        ap_reg_pp0_iter1_tmp_23_reg_883 <= tmp_23_reg_883;
        exitcond3_reg_842 <= exitcond3_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_842 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        idxCol_1_reg_928 <= idxCol_1_fu_473_p3;
        phitmp_reg_938 <= phitmp_fu_486_p2;
        pixConvolved_2_reg_933 <= pixConvolved_2_fu_479_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxCol_reg_873 <= idxCol_fu_410_p2;
        lineBuff_val_1_V_ad_reg_851 <= tmp_s_fu_360_p1;
        lineBuff_val_2_V_ad_reg_856 <= tmp_s_fu_360_p1;
        or_cond_reg_861 <= or_cond_fu_398_p2;
        tmp_21_reg_867 <= tmp_21_fu_404_p2;
        tmp_23_reg_883 <= tmp_23_fu_430_p2;
        tmp_s_reg_846[31 : 0] <= tmp_s_fu_360_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxRow_1_reg_878 <= idxRow_1_fu_422_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_861 == 1'd1) & (exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lineBuff_val_0_V_lo_5_reg_954 <= lineBuff_val_0_V_q1;
        lineBuff_val_0_V_lo_reg_943 <= lineBuff_val_0_V_q0;
        lineBuff_val_1_V_lo_3_reg_960 <= lineBuff_val_1_V_q1;
        lineBuff_val_1_V_lo_4_reg_966 <= lineBuff_val_1_V_q0;
        lineBuff_val_2_V_lo_6_reg_976 <= lineBuff_val_2_V_q1;
        lineBuff_val_2_V_lo_7_reg_982 <= lineBuff_val_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_861 == 1'd1) & (ap_reg_pp0_iter1_exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        out_x_V_reg_1013 <= {{accumulator_V_2_2_fu_789_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_861 == 1'd1) & (ap_reg_pp0_iter1_exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp2_reg_993[13 : 1] <= tmp2_fu_701_p2[13 : 1];
        tmp3_reg_998[13 : 1] <= tmp3_fu_707_p2[13 : 1];
        tmp7_reg_1008[13 : 1] <= tmp7_fu_713_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_or_cond_reg_861 == 1'd1) & (ap_reg_pp0_iter1_exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp5_reg_1003 <= grp_fu_825_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_861 == 1'd1) & (exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_118_0_1_reg_892[31 : 0] <= tmp_118_0_1_fu_449_p1[31 : 0];
        tmp_118_0_2_reg_897[31 : 0] <= tmp_118_0_2_fu_461_p1[31 : 0];
    end
end

always @ (*) begin
    if ((exitcond3_fu_354_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_col_assign_phi_fu_289_p4 = idxCol_1_reg_928;
    end else begin
        ap_phi_mux_col_assign_phi_fu_289_p4 = col_assign_reg_285;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_countWait_phi_fu_323_p4 = phitmp_reg_938;
    end else begin
        ap_phi_mux_countWait_phi_fu_323_p4 = countWait_reg_319;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond3_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_idxRow_phi_fu_300_p4 = idxRow_1_reg_878;
    end else begin
        ap_phi_mux_idxRow_phi_fu_300_p4 = idxRow_reg_296;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_mux_pixConvolved_phi_fu_311_p4 = pixConvolved_2_reg_933;
    end else begin
        ap_phi_mux_pixConvolved_phi_fu_311_p4 = pixConvolved_reg_307;
    end
end

always @ (*) begin
    if ((((exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_x_V_V_blk_n = dst_x_V_V_full_n;
    end else begin
        dst_x_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        dst_x_V_V_din = 8'd0;
    end else if (((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_x_V_V_din = tmp_V_fu_805_p3;
    end else begin
        dst_x_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dst_x_V_V_write = 1'b1;
    end else begin
        dst_x_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dst_y_V_V_blk_n = dst_y_V_V_full_n;
    end else begin
        dst_y_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        dst_y_V_V_din = 8'd0;
    end else if (((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_y_V_V_din = tmp_V_fu_805_p3;
    end else begin
        dst_y_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dst_y_V_V_write = 1'b1;
    end else begin
        dst_y_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuff_val_0_V_address0 = tmp_118_0_1_reg_892;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lineBuff_val_0_V_address0 = tmp_20_fu_436_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuff_val_0_V_address0 = tmp_s_reg_846;
    end else begin
        lineBuff_val_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuff_val_0_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lineBuff_val_0_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuff_val_0_V_we0 = 1'b1;
    end else begin
        lineBuff_val_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_V_address0 = tmp_118_0_1_fu_449_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_1_V_address0 = lineBuff_val_1_V_ad_reg_851;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_1_V_address0 = tmp_s_fu_360_p1;
        end else begin
            lineBuff_val_1_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuff_val_1_V_address1 = tmp_118_0_2_reg_897;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lineBuff_val_1_V_address1 = tmp_20_fu_436_p1;
    end else begin
        lineBuff_val_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuff_val_1_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_1_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuff_val_1_V_we0 = 1'b1;
    end else begin
        lineBuff_val_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_V_address0 = tmp_118_0_1_fu_449_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuff_val_2_V_address0 = lineBuff_val_2_V_ad_reg_856;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_2_V_address0 = tmp_s_fu_360_p1;
        end else begin
            lineBuff_val_2_V_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lineBuff_val_2_V_address1 = tmp_118_0_2_reg_897;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lineBuff_val_2_V_address1 = tmp_20_fu_436_p1;
    end else begin
        lineBuff_val_2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuff_val_2_V_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_2_V_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuff_val_2_V_we0 = 1'b1;
    end else begin
        lineBuff_val_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_V_V_blk_n = src_V_V_empty_n;
    end else begin
        src_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_V_V_read = 1'b1;
    end else begin
        src_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond3_fu_354_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond3_fu_354_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0))) & (exitcond_fu_813_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulator_V_2_2_fu_789_p2 = (tmp4_fu_783_p2 + tmp1_cast_fu_763_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_y_V_V_full_n == 1'b0)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_x_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_y_V_V_full_n == 1'b0)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_x_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_y_V_V_full_n == 1'b0)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_x_V_V_full_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((exitcond3_reg_842 == 1'd0) & (src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((exitcond3_reg_842 == 1'd0) & (src_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state11 = (((exitcond_fu_813_p2 == 1'd0) & (dst_y_V_V_full_n == 1'b0)) | ((exitcond_fu_813_p2 == 1'd0) & (dst_x_V_V_full_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((exitcond3_reg_842 == 1'd0) & (src_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter2 = (((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_y_V_V_full_n == 1'b0)) | ((ap_reg_pp0_iter1_tmp_23_reg_883 == 1'd1) & (dst_x_V_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign col_assign_7_0_2_fu_455_p2 = (ap_phi_mux_pixConvolved_phi_fu_311_p4 + 32'd2);

assign countWait_4_fu_819_p2 = (countWait_1_reg_331 + 10'd1);

assign exitcond2_fu_342_p2 = ((i_reg_274 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_354_p2 = ((ap_phi_mux_countWait_phi_fu_323_p4 == 19'd262145) ? 1'b1 : 1'b0);

assign exitcond_fu_813_p2 = ((countWait_1_reg_331 == 10'd513) ? 1'b1 : 1'b0);

assign grp_fu_825_p0 = grp_fu_825_p00;

assign grp_fu_825_p00 = lineBuff_val_1_V_lo_4_reg_966;

assign grp_fu_825_p1 = 15'd37;

assign grp_fu_825_p2 = grp_fu_825_p20;

assign grp_fu_825_p20 = val_V_3_1_2_fu_633_p2;

assign i_2_fu_348_p2 = (i_reg_274 + 4'd1);

assign icmp3_fu_392_p2 = (($signed(tmp_40_fu_382_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_376_p2 = (($signed(tmp_39_fu_366_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_473_p3 = ((tmp_21_reg_867[0:0] === 1'b1) ? idxCol_reg_873 : 32'd0);

assign idxCol_fu_410_p2 = (ap_phi_mux_col_assign_phi_fu_289_p4 + 32'd1);

assign idxRow_1_fu_422_p3 = ((tmp_21_fu_404_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_300_p4 : idxRow_4_fu_416_p2);

assign idxRow_4_fu_416_p2 = (ap_phi_mux_idxRow_phi_fu_300_p4 + 32'd1);

assign lineBuff_val_0_V_address1 = tmp_118_0_2_fu_461_p1;

assign or_cond_fu_398_p2 = (icmp_fu_376_p2 & icmp3_fu_392_p2);

assign p_shl10_fu_629_p1 = tmp_32_fu_621_p3;

assign p_shl11_fu_726_p1 = tmp_33_fu_719_p3;

assign p_shl12_fu_737_p1 = tmp_34_fu_730_p3;

assign p_shl13_fu_650_p1 = tmp_35_fu_643_p3;

assign p_shl14_fu_661_p1 = tmp_36_fu_654_p3;

assign p_shl15_fu_691_p1 = tmp_38_fu_683_p3;

assign p_shl1_fu_499_p1 = tmp_fu_492_p3;

assign p_shl2_fu_510_p1 = tmp_22_fu_503_p3;

assign p_shl3_fu_528_p1 = tmp_25_fu_520_p3;

assign p_shl4_fu_540_p1 = tmp_26_fu_532_p3;

assign p_shl5_fu_557_p1 = tmp_27_fu_550_p3;

assign p_shl6_fu_568_p1 = tmp_28_fu_561_p3;

assign p_shl7_fu_585_p1 = tmp_29_fu_578_p3;

assign p_shl8_fu_596_p1 = tmp_30_fu_589_p3;

assign p_shl9_fu_617_p1 = tmp_31_fu_609_p3;

assign p_shl_fu_679_p1 = tmp_37_fu_671_p3;

assign phitmp_fu_486_p2 = (countWait_reg_319 + 19'd1);

assign pixConvolved_1_fu_466_p3 = ((or_cond_reg_861[0:0] === 1'b1) ? pixConvolved_5_fu_443_p2 : ap_phi_mux_pixConvolved_phi_fu_311_p4);

assign pixConvolved_2_fu_479_p3 = ((tmp_21_reg_867[0:0] === 1'b1) ? pixConvolved_1_fu_466_p3 : 32'd0);

assign pixConvolved_5_fu_443_p2 = (ap_phi_mux_pixConvolved_phi_fu_311_p4 + 32'd1);

assign start_out = real_start;

assign tmp1_cast_fu_763_p1 = tmp1_fu_757_p2;

assign tmp1_fu_757_p2 = (tmp3_cast_fu_754_p1 + tmp2_cast_fu_751_p1);

assign tmp2_cast_fu_751_p1 = tmp2_reg_993;

assign tmp2_fu_701_p2 = (val_V_3_fu_514_p2 + val_V_3_0_1_fu_544_p2);

assign tmp3_cast_fu_754_p1 = tmp3_reg_998;

assign tmp3_fu_707_p2 = (val_V_3_0_2_fu_572_p2 + val_V_3_1_fu_600_p2);

assign tmp4_fu_783_p2 = (tmp6_cast_fu_779_p1 + tmp5_cast_fu_767_p1);

assign tmp5_cast_fu_767_p1 = tmp5_reg_1003;

assign tmp6_cast_fu_779_p1 = tmp6_fu_773_p2;

assign tmp6_fu_773_p2 = (tmp7_cast_fu_770_p1 + val_V_3_2_cast_fu_747_p1);

assign tmp7_cast_fu_770_p1 = tmp7_reg_1008;

assign tmp7_fu_713_p2 = (val_V_3_2_1_fu_665_p2 + val_V_3_2_2_fu_695_p2);

assign tmp_118_0_1_fu_449_p1 = pixConvolved_5_fu_443_p2;

assign tmp_118_0_2_fu_461_p1 = col_assign_7_0_2_fu_455_p2;

assign tmp_20_fu_436_p1 = ap_phi_mux_pixConvolved_phi_fu_311_p4;

assign tmp_21_fu_404_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_289_p4) < $signed(32'd511)) ? 1'b1 : 1'b0);

assign tmp_22_fu_503_p3 = {{lineBuff_val_0_V_lo_reg_943}, {3'd0}};

assign tmp_23_fu_430_p2 = ((ap_phi_mux_countWait_phi_fu_323_p4 > 19'd513) ? 1'b1 : 1'b0);

assign tmp_25_fu_520_p3 = {{lineBuff_val_0_V_q0}, {5'd0}};

assign tmp_26_fu_532_p3 = {{lineBuff_val_0_V_q0}, {1'd0}};

assign tmp_27_fu_550_p3 = {{lineBuff_val_0_V_lo_5_reg_954}, {5'd0}};

assign tmp_28_fu_561_p3 = {{lineBuff_val_0_V_lo_5_reg_954}, {3'd0}};

assign tmp_29_fu_578_p3 = {{lineBuff_val_1_V_lo_3_reg_960}, {5'd0}};

assign tmp_30_fu_589_p3 = {{lineBuff_val_1_V_lo_3_reg_960}, {1'd0}};

assign tmp_31_fu_609_p3 = {{lineBuff_val_1_V_q1}, {5'd0}};

assign tmp_32_fu_621_p3 = {{lineBuff_val_1_V_q1}, {1'd0}};

assign tmp_33_fu_719_p3 = {{lineBuff_val_2_V_lo_6_reg_976}, {5'd0}};

assign tmp_34_fu_730_p3 = {{lineBuff_val_2_V_lo_6_reg_976}, {3'd0}};

assign tmp_35_fu_643_p3 = {{lineBuff_val_2_V_lo_7_reg_982}, {5'd0}};

assign tmp_36_fu_654_p3 = {{lineBuff_val_2_V_lo_7_reg_982}, {1'd0}};

assign tmp_37_fu_671_p3 = {{lineBuff_val_2_V_q1}, {5'd0}};

assign tmp_38_fu_683_p3 = {{lineBuff_val_2_V_q1}, {3'd0}};

assign tmp_39_fu_366_p4 = {{ap_phi_mux_idxRow_phi_fu_300_p4[31:1]}};

assign tmp_40_fu_382_p4 = {{ap_phi_mux_col_assign_phi_fu_289_p4[31:1]}};

assign tmp_V_fu_805_p3 = ((ap_reg_pp0_iter1_or_cond_reg_861[0:0] === 1'b1) ? out_x_V_reg_1013 : 8'd0);

assign tmp_fu_492_p3 = {{lineBuff_val_0_V_lo_reg_943}, {5'd0}};

assign tmp_s_fu_360_p1 = ap_phi_mux_col_assign_phi_fu_289_p4;

assign val_V_3_0_1_fu_544_p2 = (p_shl3_fu_528_p1 - p_shl4_fu_540_p1);

assign val_V_3_0_2_fu_572_p2 = (p_shl5_fu_557_p1 - p_shl6_fu_568_p1);

assign val_V_3_1_2_fu_633_p2 = (p_shl9_fu_617_p1 - p_shl10_fu_629_p1);

assign val_V_3_1_fu_600_p2 = (p_shl7_fu_585_p1 - p_shl8_fu_596_p1);

assign val_V_3_2_1_fu_665_p2 = (p_shl13_fu_650_p1 - p_shl14_fu_661_p1);

assign val_V_3_2_2_fu_695_p2 = (p_shl_fu_679_p1 - p_shl15_fu_691_p1);

assign val_V_3_2_cast_fu_747_p1 = val_V_3_2_fu_741_p2;

assign val_V_3_2_fu_741_p2 = (p_shl11_fu_726_p1 - p_shl12_fu_737_p1);

assign val_V_3_fu_514_p2 = (p_shl1_fu_499_p1 - p_shl2_fu_510_p1);

always @ (posedge ap_clk) begin
    tmp_s_reg_846[63:32] <= 32'b00000000000000000000000000000000;
    tmp_118_0_1_reg_892[63:32] <= 32'b00000000000000000000000000000000;
    tmp_118_0_2_reg_897[63:32] <= 32'b00000000000000000000000000000000;
    tmp2_reg_993[0] <= 1'b0;
    tmp3_reg_998[0] <= 1'b0;
    tmp7_reg_1008[0] <= 1'b0;
end

endmodule //gaussianBlur
