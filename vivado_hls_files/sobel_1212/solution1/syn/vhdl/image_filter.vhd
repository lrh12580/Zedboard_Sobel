-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_HOSTMEM_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HOSTMEM_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HOSTMEM_2_USER_VALUE : INTEGER := 0;
    C_M_AXI_HOSTMEM_2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HOSTMEM_2_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_hostmem_1_AWVALID : OUT STD_LOGIC;
    m_axi_hostmem_1_AWREADY : IN STD_LOGIC;
    m_axi_hostmem_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ADDR_WIDTH-1 downto 0);
    m_axi_hostmem_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ID_WIDTH-1 downto 0);
    m_axi_hostmem_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hostmem_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_AWUSER_WIDTH-1 downto 0);
    m_axi_hostmem_1_WVALID : OUT STD_LOGIC;
    m_axi_hostmem_1_WREADY : IN STD_LOGIC;
    m_axi_hostmem_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_DATA_WIDTH-1 downto 0);
    m_axi_hostmem_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_DATA_WIDTH/8-1 downto 0);
    m_axi_hostmem_1_WLAST : OUT STD_LOGIC;
    m_axi_hostmem_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ID_WIDTH-1 downto 0);
    m_axi_hostmem_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_WUSER_WIDTH-1 downto 0);
    m_axi_hostmem_1_ARVALID : OUT STD_LOGIC;
    m_axi_hostmem_1_ARREADY : IN STD_LOGIC;
    m_axi_hostmem_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ADDR_WIDTH-1 downto 0);
    m_axi_hostmem_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ID_WIDTH-1 downto 0);
    m_axi_hostmem_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hostmem_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ARUSER_WIDTH-1 downto 0);
    m_axi_hostmem_1_RVALID : IN STD_LOGIC;
    m_axi_hostmem_1_RREADY : OUT STD_LOGIC;
    m_axi_hostmem_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_DATA_WIDTH-1 downto 0);
    m_axi_hostmem_1_RLAST : IN STD_LOGIC;
    m_axi_hostmem_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ID_WIDTH-1 downto 0);
    m_axi_hostmem_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_RUSER_WIDTH-1 downto 0);
    m_axi_hostmem_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_1_BVALID : IN STD_LOGIC;
    m_axi_hostmem_1_BREADY : OUT STD_LOGIC;
    m_axi_hostmem_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_ID_WIDTH-1 downto 0);
    m_axi_hostmem_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_1_BUSER_WIDTH-1 downto 0);
    m_axi_hostmem_2_AWVALID : OUT STD_LOGIC;
    m_axi_hostmem_2_AWREADY : IN STD_LOGIC;
    m_axi_hostmem_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ADDR_WIDTH-1 downto 0);
    m_axi_hostmem_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ID_WIDTH-1 downto 0);
    m_axi_hostmem_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hostmem_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_AWUSER_WIDTH-1 downto 0);
    m_axi_hostmem_2_WVALID : OUT STD_LOGIC;
    m_axi_hostmem_2_WREADY : IN STD_LOGIC;
    m_axi_hostmem_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_DATA_WIDTH-1 downto 0);
    m_axi_hostmem_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_DATA_WIDTH/8-1 downto 0);
    m_axi_hostmem_2_WLAST : OUT STD_LOGIC;
    m_axi_hostmem_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ID_WIDTH-1 downto 0);
    m_axi_hostmem_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_WUSER_WIDTH-1 downto 0);
    m_axi_hostmem_2_ARVALID : OUT STD_LOGIC;
    m_axi_hostmem_2_ARREADY : IN STD_LOGIC;
    m_axi_hostmem_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ADDR_WIDTH-1 downto 0);
    m_axi_hostmem_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ID_WIDTH-1 downto 0);
    m_axi_hostmem_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hostmem_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ARUSER_WIDTH-1 downto 0);
    m_axi_hostmem_2_RVALID : IN STD_LOGIC;
    m_axi_hostmem_2_RREADY : OUT STD_LOGIC;
    m_axi_hostmem_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_DATA_WIDTH-1 downto 0);
    m_axi_hostmem_2_RLAST : IN STD_LOGIC;
    m_axi_hostmem_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ID_WIDTH-1 downto 0);
    m_axi_hostmem_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_RUSER_WIDTH-1 downto 0);
    m_axi_hostmem_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_2_BVALID : IN STD_LOGIC;
    m_axi_hostmem_2_BREADY : OUT STD_LOGIC;
    m_axi_hostmem_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_ID_WIDTH-1 downto 0);
    m_axi_hostmem_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_2_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=23,HLS_SYN_DSP=65,HLS_SYN_FF=9806,HLS_SYN_LUT=17971}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_1_AWREADY : STD_LOGIC;
    signal hostmem_1_WREADY : STD_LOGIC;
    signal hostmem_1_ARREADY : STD_LOGIC;
    signal hostmem_1_RVALID : STD_LOGIC;
    signal hostmem_1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_1_RLAST : STD_LOGIC;
    signal hostmem_1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_1_BVALID : STD_LOGIC;
    signal hostmem_1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_2_AWREADY : STD_LOGIC;
    signal hostmem_2_WREADY : STD_LOGIC;
    signal hostmem_2_ARREADY : STD_LOGIC;
    signal hostmem_2_RVALID : STD_LOGIC;
    signal hostmem_2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_2_RLAST : STD_LOGIC;
    signal hostmem_2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_2_BVALID : STD_LOGIC;
    signal hostmem_2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_ap_start : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_start_full_n : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_ap_done : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_ap_continue : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_ap_idle : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_ap_ready : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_start_out : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_start_write : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWVALID : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_WVALID : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_m_axi_in_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_WLAST : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_m_axi_in_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARVALID : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mem2Stream_Batch9_U0_m_axi_in_V_RREADY : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_m_axi_in_V_BREADY : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_out_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_out_V_V_write : STD_LOGIC;
    signal Mem2Stream_Batch9_U0_out_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mem2Stream_Batch9_U0_out_V_out_write : STD_LOGIC;
    signal bgr2gray_U0_ap_start : STD_LOGIC;
    signal bgr2gray_U0_ap_done : STD_LOGIC;
    signal bgr2gray_U0_ap_continue : STD_LOGIC;
    signal bgr2gray_U0_ap_idle : STD_LOGIC;
    signal bgr2gray_U0_ap_ready : STD_LOGIC;
    signal bgr2gray_U0_start_out : STD_LOGIC;
    signal bgr2gray_U0_start_write : STD_LOGIC;
    signal bgr2gray_U0_src_V_V_read : STD_LOGIC;
    signal bgr2gray_U0_dst_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal bgr2gray_U0_dst_V_V_write : STD_LOGIC;
    signal gaussianBlur_U0_ap_start : STD_LOGIC;
    signal gaussianBlur_U0_start_full_n : STD_LOGIC;
    signal gaussianBlur_U0_ap_done : STD_LOGIC;
    signal gaussianBlur_U0_ap_continue : STD_LOGIC;
    signal gaussianBlur_U0_ap_idle : STD_LOGIC;
    signal gaussianBlur_U0_ap_ready : STD_LOGIC;
    signal gaussianBlur_U0_start_out : STD_LOGIC;
    signal gaussianBlur_U0_start_write : STD_LOGIC;
    signal gaussianBlur_U0_src_V_V_read : STD_LOGIC;
    signal gaussianBlur_U0_dst_x_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal gaussianBlur_U0_dst_x_V_V_write : STD_LOGIC;
    signal gaussianBlur_U0_dst_y_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal gaussianBlur_U0_dst_y_V_V_write : STD_LOGIC;
    signal sobel_x_U0_ap_start : STD_LOGIC;
    signal sobel_x_U0_ap_done : STD_LOGIC;
    signal sobel_x_U0_ap_continue : STD_LOGIC;
    signal sobel_x_U0_ap_idle : STD_LOGIC;
    signal sobel_x_U0_ap_ready : STD_LOGIC;
    signal sobel_x_U0_start_out : STD_LOGIC;
    signal sobel_x_U0_start_write : STD_LOGIC;
    signal sobel_x_U0_src_V_V_read : STD_LOGIC;
    signal sobel_x_U0_dst_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_x_U0_dst_V_V_write : STD_LOGIC;
    signal sobel_y_U0_ap_start : STD_LOGIC;
    signal sobel_y_U0_ap_done : STD_LOGIC;
    signal sobel_y_U0_ap_continue : STD_LOGIC;
    signal sobel_y_U0_ap_idle : STD_LOGIC;
    signal sobel_y_U0_ap_ready : STD_LOGIC;
    signal sobel_y_U0_src_V_V_read : STD_LOGIC;
    signal sobel_y_U0_dst_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_y_U0_dst_V_V_write : STD_LOGIC;
    signal addWeighted_U0_ap_start : STD_LOGIC;
    signal addWeighted_U0_ap_done : STD_LOGIC;
    signal addWeighted_U0_ap_continue : STD_LOGIC;
    signal addWeighted_U0_ap_idle : STD_LOGIC;
    signal addWeighted_U0_ap_ready : STD_LOGIC;
    signal addWeighted_U0_start_out : STD_LOGIC;
    signal addWeighted_U0_start_write : STD_LOGIC;
    signal addWeighted_U0_src_x_V_V_read : STD_LOGIC;
    signal addWeighted_U0_src_y_V_V_read : STD_LOGIC;
    signal addWeighted_U0_dst_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal addWeighted_U0_dst_V_V_write : STD_LOGIC;
    signal gray2bgr_U0_ap_start : STD_LOGIC;
    signal gray2bgr_U0_ap_done : STD_LOGIC;
    signal gray2bgr_U0_ap_continue : STD_LOGIC;
    signal gray2bgr_U0_ap_idle : STD_LOGIC;
    signal gray2bgr_U0_ap_ready : STD_LOGIC;
    signal gray2bgr_U0_src_V_V_read : STD_LOGIC;
    signal gray2bgr_U0_dst_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gray2bgr_U0_dst_V_V_write : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_start : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_done : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_continue : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_idle : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_ready : STD_LOGIC;
    signal Stream2Mem_Batch_U0_in_V_V_read : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWVALID : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WVALID : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WLAST : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARVALID : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_RREADY : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_BREADY : STD_LOGIC;
    signal Stream2Mem_Batch_U0_out_V_offset_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal in_stream_V_V_full_n : STD_LOGIC;
    signal in_stream_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_V_empty_n : STD_LOGIC;
    signal out_V_c_full_n : STD_LOGIC;
    signal out_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_c_empty_n : STD_LOGIC;
    signal gray_stream_V_V_full_n : STD_LOGIC;
    signal gray_stream_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal gray_stream_V_V_empty_n : STD_LOGIC;
    signal gaussian_stream_x_V_s_full_n : STD_LOGIC;
    signal gaussian_stream_x_V_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal gaussian_stream_x_V_s_empty_n : STD_LOGIC;
    signal gaussian_stream_y_V_s_full_n : STD_LOGIC;
    signal gaussian_stream_y_V_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal gaussian_stream_y_V_s_empty_n : STD_LOGIC;
    signal sobel_stream_x_V_V_full_n : STD_LOGIC;
    signal sobel_stream_x_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_stream_x_V_V_empty_n : STD_LOGIC;
    signal sobel_stream_y_V_V_full_n : STD_LOGIC;
    signal sobel_stream_y_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_stream_y_V_V_empty_n : STD_LOGIC;
    signal addWeight_stream_V_V_full_n : STD_LOGIC;
    signal addWeight_stream_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal addWeight_stream_V_V_empty_n : STD_LOGIC;
    signal out_stream_V_V_full_n : STD_LOGIC;
    signal out_stream_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_bgr2gray_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_bgr2gray_U0_full_n : STD_LOGIC;
    signal start_for_bgr2gray_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_bgr2gray_U0_empty_n : STD_LOGIC;
    signal start_for_Stream2Mem_Batch_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Stream2Mem_Batch_U0_full_n : STD_LOGIC;
    signal start_for_Stream2Mem_Batch_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Stream2Mem_Batch_U0_empty_n : STD_LOGIC;
    signal start_for_gaussianBlur_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gaussianBlur_U0_full_n : STD_LOGIC;
    signal start_for_gaussianBlur_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gaussianBlur_U0_empty_n : STD_LOGIC;
    signal start_for_sobel_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_x_U0_full_n : STD_LOGIC;
    signal start_for_sobel_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_x_U0_empty_n : STD_LOGIC;
    signal start_for_sobel_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_y_U0_full_n : STD_LOGIC;
    signal start_for_sobel_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_y_U0_empty_n : STD_LOGIC;
    signal start_for_addWeighted_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_addWeighted_U0_full_n : STD_LOGIC;
    signal start_for_addWeighted_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_addWeighted_U0_empty_n : STD_LOGIC;
    signal sobel_y_U0_start_full_n : STD_LOGIC;
    signal sobel_y_U0_start_write : STD_LOGIC;
    signal start_for_gray2bgr_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gray2bgr_U0_full_n : STD_LOGIC;
    signal start_for_gray2bgr_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gray2bgr_U0_empty_n : STD_LOGIC;
    signal gray2bgr_U0_start_full_n : STD_LOGIC;
    signal gray2bgr_U0_start_write : STD_LOGIC;
    signal Stream2Mem_Batch_U0_start_full_n : STD_LOGIC;
    signal Stream2Mem_Batch_U0_start_write : STD_LOGIC;

    component Mem2Stream_Batch9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_in_V_AWVALID : OUT STD_LOGIC;
        m_axi_in_V_AWREADY : IN STD_LOGIC;
        m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WVALID : OUT STD_LOGIC;
        m_axi_in_V_WREADY : IN STD_LOGIC;
        m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_WLAST : OUT STD_LOGIC;
        m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARVALID : OUT STD_LOGIC;
        m_axi_in_V_ARREADY : IN STD_LOGIC;
        m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RVALID : IN STD_LOGIC;
        m_axi_in_V_RREADY : OUT STD_LOGIC;
        m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_RLAST : IN STD_LOGIC;
        m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BVALID : IN STD_LOGIC;
        m_axi_in_V_BREADY : OUT STD_LOGIC;
        m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        out_V : IN STD_LOGIC_VECTOR (31 downto 0);
        out_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_out_full_n : IN STD_LOGIC;
        out_V_out_write : OUT STD_LOGIC );
    end component;


    component bgr2gray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        src_V_V_empty_n : IN STD_LOGIC;
        src_V_V_read : OUT STD_LOGIC;
        dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_V_V_full_n : IN STD_LOGIC;
        dst_V_V_write : OUT STD_LOGIC );
    end component;


    component gaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_V_V_empty_n : IN STD_LOGIC;
        src_V_V_read : OUT STD_LOGIC;
        dst_x_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_x_V_V_full_n : IN STD_LOGIC;
        dst_x_V_V_write : OUT STD_LOGIC;
        dst_y_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_y_V_V_full_n : IN STD_LOGIC;
        dst_y_V_V_write : OUT STD_LOGIC );
    end component;


    component sobel_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_V_V_empty_n : IN STD_LOGIC;
        src_V_V_read : OUT STD_LOGIC;
        dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_V_V_full_n : IN STD_LOGIC;
        dst_V_V_write : OUT STD_LOGIC );
    end component;


    component sobel_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_V_V_empty_n : IN STD_LOGIC;
        src_V_V_read : OUT STD_LOGIC;
        dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_V_V_full_n : IN STD_LOGIC;
        dst_V_V_write : OUT STD_LOGIC );
    end component;


    component addWeighted IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_x_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_x_V_V_empty_n : IN STD_LOGIC;
        src_x_V_V_read : OUT STD_LOGIC;
        src_y_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_y_V_V_empty_n : IN STD_LOGIC;
        src_y_V_V_read : OUT STD_LOGIC;
        dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_V_V_full_n : IN STD_LOGIC;
        dst_V_V_write : OUT STD_LOGIC );
    end component;


    component gray2bgr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_V_V_empty_n : IN STD_LOGIC;
        src_V_V_read : OUT STD_LOGIC;
        dst_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_V_V_full_n : IN STD_LOGIC;
        dst_V_V_write : OUT STD_LOGIC );
    end component;


    component Stream2Mem_Batch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        m_axi_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_out_V_AWREADY : IN STD_LOGIC;
        m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WVALID : OUT STD_LOGIC;
        m_axi_out_V_WREADY : IN STD_LOGIC;
        m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_WLAST : OUT STD_LOGIC;
        m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_out_V_ARREADY : IN STD_LOGIC;
        m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RVALID : IN STD_LOGIC;
        m_axi_out_V_RREADY : OUT STD_LOGIC;
        m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_RLAST : IN STD_LOGIC;
        m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BVALID : IN STD_LOGIC;
        m_axi_out_V_BREADY : OUT STD_LOGIC;
        m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        out_V_offset_empty_n : IN STD_LOGIC;
        out_V_offset_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_bgr2grapcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Stream2qcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gaussiarcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_sobel_xsc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_sobel_ytde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_addWeigudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gray2bgvdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component image_filter_hostmem_1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component image_filter_hostmem_2_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    image_filter_CONTROL_BUS_s_axi_U : component image_filter_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_V => in_V,
        out_V => out_V,
        rows => rows,
        cols => cols);

    image_filter_hostmem_1_m_axi_U : component image_filter_hostmem_1_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_HOSTMEM_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HOSTMEM_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HOSTMEM_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HOSTMEM_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HOSTMEM_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HOSTMEM_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HOSTMEM_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HOSTMEM_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HOSTMEM_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HOSTMEM_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HOSTMEM_1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_hostmem_1_AWVALID,
        AWREADY => m_axi_hostmem_1_AWREADY,
        AWADDR => m_axi_hostmem_1_AWADDR,
        AWID => m_axi_hostmem_1_AWID,
        AWLEN => m_axi_hostmem_1_AWLEN,
        AWSIZE => m_axi_hostmem_1_AWSIZE,
        AWBURST => m_axi_hostmem_1_AWBURST,
        AWLOCK => m_axi_hostmem_1_AWLOCK,
        AWCACHE => m_axi_hostmem_1_AWCACHE,
        AWPROT => m_axi_hostmem_1_AWPROT,
        AWQOS => m_axi_hostmem_1_AWQOS,
        AWREGION => m_axi_hostmem_1_AWREGION,
        AWUSER => m_axi_hostmem_1_AWUSER,
        WVALID => m_axi_hostmem_1_WVALID,
        WREADY => m_axi_hostmem_1_WREADY,
        WDATA => m_axi_hostmem_1_WDATA,
        WSTRB => m_axi_hostmem_1_WSTRB,
        WLAST => m_axi_hostmem_1_WLAST,
        WID => m_axi_hostmem_1_WID,
        WUSER => m_axi_hostmem_1_WUSER,
        ARVALID => m_axi_hostmem_1_ARVALID,
        ARREADY => m_axi_hostmem_1_ARREADY,
        ARADDR => m_axi_hostmem_1_ARADDR,
        ARID => m_axi_hostmem_1_ARID,
        ARLEN => m_axi_hostmem_1_ARLEN,
        ARSIZE => m_axi_hostmem_1_ARSIZE,
        ARBURST => m_axi_hostmem_1_ARBURST,
        ARLOCK => m_axi_hostmem_1_ARLOCK,
        ARCACHE => m_axi_hostmem_1_ARCACHE,
        ARPROT => m_axi_hostmem_1_ARPROT,
        ARQOS => m_axi_hostmem_1_ARQOS,
        ARREGION => m_axi_hostmem_1_ARREGION,
        ARUSER => m_axi_hostmem_1_ARUSER,
        RVALID => m_axi_hostmem_1_RVALID,
        RREADY => m_axi_hostmem_1_RREADY,
        RDATA => m_axi_hostmem_1_RDATA,
        RLAST => m_axi_hostmem_1_RLAST,
        RID => m_axi_hostmem_1_RID,
        RUSER => m_axi_hostmem_1_RUSER,
        RRESP => m_axi_hostmem_1_RRESP,
        BVALID => m_axi_hostmem_1_BVALID,
        BREADY => m_axi_hostmem_1_BREADY,
        BRESP => m_axi_hostmem_1_BRESP,
        BID => m_axi_hostmem_1_BID,
        BUSER => m_axi_hostmem_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Mem2Stream_Batch9_U0_m_axi_in_V_ARVALID,
        I_ARREADY => hostmem_1_ARREADY,
        I_ARADDR => Mem2Stream_Batch9_U0_m_axi_in_V_ARADDR,
        I_ARID => Mem2Stream_Batch9_U0_m_axi_in_V_ARID,
        I_ARLEN => Mem2Stream_Batch9_U0_m_axi_in_V_ARLEN,
        I_ARSIZE => Mem2Stream_Batch9_U0_m_axi_in_V_ARSIZE,
        I_ARLOCK => Mem2Stream_Batch9_U0_m_axi_in_V_ARLOCK,
        I_ARCACHE => Mem2Stream_Batch9_U0_m_axi_in_V_ARCACHE,
        I_ARQOS => Mem2Stream_Batch9_U0_m_axi_in_V_ARQOS,
        I_ARPROT => Mem2Stream_Batch9_U0_m_axi_in_V_ARPROT,
        I_ARUSER => Mem2Stream_Batch9_U0_m_axi_in_V_ARUSER,
        I_ARBURST => Mem2Stream_Batch9_U0_m_axi_in_V_ARBURST,
        I_ARREGION => Mem2Stream_Batch9_U0_m_axi_in_V_ARREGION,
        I_RVALID => hostmem_1_RVALID,
        I_RREADY => Mem2Stream_Batch9_U0_m_axi_in_V_RREADY,
        I_RDATA => hostmem_1_RDATA,
        I_RID => hostmem_1_RID,
        I_RUSER => hostmem_1_RUSER,
        I_RRESP => hostmem_1_RRESP,
        I_RLAST => hostmem_1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => hostmem_1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => hostmem_1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => hostmem_1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => hostmem_1_BRESP,
        I_BID => hostmem_1_BID,
        I_BUSER => hostmem_1_BUSER);

    image_filter_hostmem_2_m_axi_U : component image_filter_hostmem_2_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_HOSTMEM_2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HOSTMEM_2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HOSTMEM_2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HOSTMEM_2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HOSTMEM_2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HOSTMEM_2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HOSTMEM_2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HOSTMEM_2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HOSTMEM_2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HOSTMEM_2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HOSTMEM_2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_hostmem_2_AWVALID,
        AWREADY => m_axi_hostmem_2_AWREADY,
        AWADDR => m_axi_hostmem_2_AWADDR,
        AWID => m_axi_hostmem_2_AWID,
        AWLEN => m_axi_hostmem_2_AWLEN,
        AWSIZE => m_axi_hostmem_2_AWSIZE,
        AWBURST => m_axi_hostmem_2_AWBURST,
        AWLOCK => m_axi_hostmem_2_AWLOCK,
        AWCACHE => m_axi_hostmem_2_AWCACHE,
        AWPROT => m_axi_hostmem_2_AWPROT,
        AWQOS => m_axi_hostmem_2_AWQOS,
        AWREGION => m_axi_hostmem_2_AWREGION,
        AWUSER => m_axi_hostmem_2_AWUSER,
        WVALID => m_axi_hostmem_2_WVALID,
        WREADY => m_axi_hostmem_2_WREADY,
        WDATA => m_axi_hostmem_2_WDATA,
        WSTRB => m_axi_hostmem_2_WSTRB,
        WLAST => m_axi_hostmem_2_WLAST,
        WID => m_axi_hostmem_2_WID,
        WUSER => m_axi_hostmem_2_WUSER,
        ARVALID => m_axi_hostmem_2_ARVALID,
        ARREADY => m_axi_hostmem_2_ARREADY,
        ARADDR => m_axi_hostmem_2_ARADDR,
        ARID => m_axi_hostmem_2_ARID,
        ARLEN => m_axi_hostmem_2_ARLEN,
        ARSIZE => m_axi_hostmem_2_ARSIZE,
        ARBURST => m_axi_hostmem_2_ARBURST,
        ARLOCK => m_axi_hostmem_2_ARLOCK,
        ARCACHE => m_axi_hostmem_2_ARCACHE,
        ARPROT => m_axi_hostmem_2_ARPROT,
        ARQOS => m_axi_hostmem_2_ARQOS,
        ARREGION => m_axi_hostmem_2_ARREGION,
        ARUSER => m_axi_hostmem_2_ARUSER,
        RVALID => m_axi_hostmem_2_RVALID,
        RREADY => m_axi_hostmem_2_RREADY,
        RDATA => m_axi_hostmem_2_RDATA,
        RLAST => m_axi_hostmem_2_RLAST,
        RID => m_axi_hostmem_2_RID,
        RUSER => m_axi_hostmem_2_RUSER,
        RRESP => m_axi_hostmem_2_RRESP,
        BVALID => m_axi_hostmem_2_BVALID,
        BREADY => m_axi_hostmem_2_BREADY,
        BRESP => m_axi_hostmem_2_BRESP,
        BID => m_axi_hostmem_2_BID,
        BUSER => m_axi_hostmem_2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => hostmem_2_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => hostmem_2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => hostmem_2_RDATA,
        I_RID => hostmem_2_RID,
        I_RUSER => hostmem_2_RUSER,
        I_RRESP => hostmem_2_RRESP,
        I_RLAST => hostmem_2_RLAST,
        I_AWVALID => Stream2Mem_Batch_U0_m_axi_out_V_AWVALID,
        I_AWREADY => hostmem_2_AWREADY,
        I_AWADDR => Stream2Mem_Batch_U0_m_axi_out_V_AWADDR,
        I_AWID => Stream2Mem_Batch_U0_m_axi_out_V_AWID,
        I_AWLEN => Stream2Mem_Batch_U0_m_axi_out_V_AWLEN,
        I_AWSIZE => Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE,
        I_AWLOCK => Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK,
        I_AWCACHE => Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE,
        I_AWQOS => Stream2Mem_Batch_U0_m_axi_out_V_AWQOS,
        I_AWPROT => Stream2Mem_Batch_U0_m_axi_out_V_AWPROT,
        I_AWUSER => Stream2Mem_Batch_U0_m_axi_out_V_AWUSER,
        I_AWBURST => Stream2Mem_Batch_U0_m_axi_out_V_AWBURST,
        I_AWREGION => Stream2Mem_Batch_U0_m_axi_out_V_AWREGION,
        I_WVALID => Stream2Mem_Batch_U0_m_axi_out_V_WVALID,
        I_WREADY => hostmem_2_WREADY,
        I_WDATA => Stream2Mem_Batch_U0_m_axi_out_V_WDATA,
        I_WID => Stream2Mem_Batch_U0_m_axi_out_V_WID,
        I_WUSER => Stream2Mem_Batch_U0_m_axi_out_V_WUSER,
        I_WLAST => Stream2Mem_Batch_U0_m_axi_out_V_WLAST,
        I_WSTRB => Stream2Mem_Batch_U0_m_axi_out_V_WSTRB,
        I_BVALID => hostmem_2_BVALID,
        I_BREADY => Stream2Mem_Batch_U0_m_axi_out_V_BREADY,
        I_BRESP => hostmem_2_BRESP,
        I_BID => hostmem_2_BID,
        I_BUSER => hostmem_2_BUSER);

    Mem2Stream_Batch9_U0 : component Mem2Stream_Batch9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mem2Stream_Batch9_U0_ap_start,
        start_full_n => Mem2Stream_Batch9_U0_start_full_n,
        ap_done => Mem2Stream_Batch9_U0_ap_done,
        ap_continue => Mem2Stream_Batch9_U0_ap_continue,
        ap_idle => Mem2Stream_Batch9_U0_ap_idle,
        ap_ready => Mem2Stream_Batch9_U0_ap_ready,
        start_out => Mem2Stream_Batch9_U0_start_out,
        start_write => Mem2Stream_Batch9_U0_start_write,
        m_axi_in_V_AWVALID => Mem2Stream_Batch9_U0_m_axi_in_V_AWVALID,
        m_axi_in_V_AWREADY => ap_const_logic_0,
        m_axi_in_V_AWADDR => Mem2Stream_Batch9_U0_m_axi_in_V_AWADDR,
        m_axi_in_V_AWID => Mem2Stream_Batch9_U0_m_axi_in_V_AWID,
        m_axi_in_V_AWLEN => Mem2Stream_Batch9_U0_m_axi_in_V_AWLEN,
        m_axi_in_V_AWSIZE => Mem2Stream_Batch9_U0_m_axi_in_V_AWSIZE,
        m_axi_in_V_AWBURST => Mem2Stream_Batch9_U0_m_axi_in_V_AWBURST,
        m_axi_in_V_AWLOCK => Mem2Stream_Batch9_U0_m_axi_in_V_AWLOCK,
        m_axi_in_V_AWCACHE => Mem2Stream_Batch9_U0_m_axi_in_V_AWCACHE,
        m_axi_in_V_AWPROT => Mem2Stream_Batch9_U0_m_axi_in_V_AWPROT,
        m_axi_in_V_AWQOS => Mem2Stream_Batch9_U0_m_axi_in_V_AWQOS,
        m_axi_in_V_AWREGION => Mem2Stream_Batch9_U0_m_axi_in_V_AWREGION,
        m_axi_in_V_AWUSER => Mem2Stream_Batch9_U0_m_axi_in_V_AWUSER,
        m_axi_in_V_WVALID => Mem2Stream_Batch9_U0_m_axi_in_V_WVALID,
        m_axi_in_V_WREADY => ap_const_logic_0,
        m_axi_in_V_WDATA => Mem2Stream_Batch9_U0_m_axi_in_V_WDATA,
        m_axi_in_V_WSTRB => Mem2Stream_Batch9_U0_m_axi_in_V_WSTRB,
        m_axi_in_V_WLAST => Mem2Stream_Batch9_U0_m_axi_in_V_WLAST,
        m_axi_in_V_WID => Mem2Stream_Batch9_U0_m_axi_in_V_WID,
        m_axi_in_V_WUSER => Mem2Stream_Batch9_U0_m_axi_in_V_WUSER,
        m_axi_in_V_ARVALID => Mem2Stream_Batch9_U0_m_axi_in_V_ARVALID,
        m_axi_in_V_ARREADY => hostmem_1_ARREADY,
        m_axi_in_V_ARADDR => Mem2Stream_Batch9_U0_m_axi_in_V_ARADDR,
        m_axi_in_V_ARID => Mem2Stream_Batch9_U0_m_axi_in_V_ARID,
        m_axi_in_V_ARLEN => Mem2Stream_Batch9_U0_m_axi_in_V_ARLEN,
        m_axi_in_V_ARSIZE => Mem2Stream_Batch9_U0_m_axi_in_V_ARSIZE,
        m_axi_in_V_ARBURST => Mem2Stream_Batch9_U0_m_axi_in_V_ARBURST,
        m_axi_in_V_ARLOCK => Mem2Stream_Batch9_U0_m_axi_in_V_ARLOCK,
        m_axi_in_V_ARCACHE => Mem2Stream_Batch9_U0_m_axi_in_V_ARCACHE,
        m_axi_in_V_ARPROT => Mem2Stream_Batch9_U0_m_axi_in_V_ARPROT,
        m_axi_in_V_ARQOS => Mem2Stream_Batch9_U0_m_axi_in_V_ARQOS,
        m_axi_in_V_ARREGION => Mem2Stream_Batch9_U0_m_axi_in_V_ARREGION,
        m_axi_in_V_ARUSER => Mem2Stream_Batch9_U0_m_axi_in_V_ARUSER,
        m_axi_in_V_RVALID => hostmem_1_RVALID,
        m_axi_in_V_RREADY => Mem2Stream_Batch9_U0_m_axi_in_V_RREADY,
        m_axi_in_V_RDATA => hostmem_1_RDATA,
        m_axi_in_V_RLAST => hostmem_1_RLAST,
        m_axi_in_V_RID => hostmem_1_RID,
        m_axi_in_V_RUSER => hostmem_1_RUSER,
        m_axi_in_V_RRESP => hostmem_1_RRESP,
        m_axi_in_V_BVALID => ap_const_logic_0,
        m_axi_in_V_BREADY => Mem2Stream_Batch9_U0_m_axi_in_V_BREADY,
        m_axi_in_V_BRESP => ap_const_lv2_0,
        m_axi_in_V_BID => ap_const_lv1_0,
        m_axi_in_V_BUSER => ap_const_lv1_0,
        in_V_offset => in_V,
        out_V_V_din => Mem2Stream_Batch9_U0_out_V_V_din,
        out_V_V_full_n => in_stream_V_V_full_n,
        out_V_V_write => Mem2Stream_Batch9_U0_out_V_V_write,
        out_V => out_V,
        out_V_out_din => Mem2Stream_Batch9_U0_out_V_out_din,
        out_V_out_full_n => out_V_c_full_n,
        out_V_out_write => Mem2Stream_Batch9_U0_out_V_out_write);

    bgr2gray_U0 : component bgr2gray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bgr2gray_U0_ap_start,
        start_full_n => start_for_gaussianBlur_U0_full_n,
        ap_done => bgr2gray_U0_ap_done,
        ap_continue => bgr2gray_U0_ap_continue,
        ap_idle => bgr2gray_U0_ap_idle,
        ap_ready => bgr2gray_U0_ap_ready,
        start_out => bgr2gray_U0_start_out,
        start_write => bgr2gray_U0_start_write,
        src_V_V_dout => in_stream_V_V_dout,
        src_V_V_empty_n => in_stream_V_V_empty_n,
        src_V_V_read => bgr2gray_U0_src_V_V_read,
        dst_V_V_din => bgr2gray_U0_dst_V_V_din,
        dst_V_V_full_n => gray_stream_V_V_full_n,
        dst_V_V_write => bgr2gray_U0_dst_V_V_write);

    gaussianBlur_U0 : component gaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gaussianBlur_U0_ap_start,
        start_full_n => gaussianBlur_U0_start_full_n,
        ap_done => gaussianBlur_U0_ap_done,
        ap_continue => gaussianBlur_U0_ap_continue,
        ap_idle => gaussianBlur_U0_ap_idle,
        ap_ready => gaussianBlur_U0_ap_ready,
        start_out => gaussianBlur_U0_start_out,
        start_write => gaussianBlur_U0_start_write,
        src_V_V_dout => gray_stream_V_V_dout,
        src_V_V_empty_n => gray_stream_V_V_empty_n,
        src_V_V_read => gaussianBlur_U0_src_V_V_read,
        dst_x_V_V_din => gaussianBlur_U0_dst_x_V_V_din,
        dst_x_V_V_full_n => gaussian_stream_x_V_s_full_n,
        dst_x_V_V_write => gaussianBlur_U0_dst_x_V_V_write,
        dst_y_V_V_din => gaussianBlur_U0_dst_y_V_V_din,
        dst_y_V_V_full_n => gaussian_stream_y_V_s_full_n,
        dst_y_V_V_write => gaussianBlur_U0_dst_y_V_V_write);

    sobel_x_U0 : component sobel_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_x_U0_ap_start,
        start_full_n => start_for_addWeighted_U0_full_n,
        ap_done => sobel_x_U0_ap_done,
        ap_continue => sobel_x_U0_ap_continue,
        ap_idle => sobel_x_U0_ap_idle,
        ap_ready => sobel_x_U0_ap_ready,
        start_out => sobel_x_U0_start_out,
        start_write => sobel_x_U0_start_write,
        src_V_V_dout => gaussian_stream_x_V_s_dout,
        src_V_V_empty_n => gaussian_stream_x_V_s_empty_n,
        src_V_V_read => sobel_x_U0_src_V_V_read,
        dst_V_V_din => sobel_x_U0_dst_V_V_din,
        dst_V_V_full_n => sobel_stream_x_V_V_full_n,
        dst_V_V_write => sobel_x_U0_dst_V_V_write);

    sobel_y_U0 : component sobel_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_y_U0_ap_start,
        ap_done => sobel_y_U0_ap_done,
        ap_continue => sobel_y_U0_ap_continue,
        ap_idle => sobel_y_U0_ap_idle,
        ap_ready => sobel_y_U0_ap_ready,
        src_V_V_dout => gaussian_stream_y_V_s_dout,
        src_V_V_empty_n => gaussian_stream_y_V_s_empty_n,
        src_V_V_read => sobel_y_U0_src_V_V_read,
        dst_V_V_din => sobel_y_U0_dst_V_V_din,
        dst_V_V_full_n => sobel_stream_y_V_V_full_n,
        dst_V_V_write => sobel_y_U0_dst_V_V_write);

    addWeighted_U0 : component addWeighted
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => addWeighted_U0_ap_start,
        start_full_n => start_for_gray2bgr_U0_full_n,
        ap_done => addWeighted_U0_ap_done,
        ap_continue => addWeighted_U0_ap_continue,
        ap_idle => addWeighted_U0_ap_idle,
        ap_ready => addWeighted_U0_ap_ready,
        start_out => addWeighted_U0_start_out,
        start_write => addWeighted_U0_start_write,
        src_x_V_V_dout => sobel_stream_x_V_V_dout,
        src_x_V_V_empty_n => sobel_stream_x_V_V_empty_n,
        src_x_V_V_read => addWeighted_U0_src_x_V_V_read,
        src_y_V_V_dout => sobel_stream_y_V_V_dout,
        src_y_V_V_empty_n => sobel_stream_y_V_V_empty_n,
        src_y_V_V_read => addWeighted_U0_src_y_V_V_read,
        dst_V_V_din => addWeighted_U0_dst_V_V_din,
        dst_V_V_full_n => addWeight_stream_V_V_full_n,
        dst_V_V_write => addWeighted_U0_dst_V_V_write);

    gray2bgr_U0 : component gray2bgr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gray2bgr_U0_ap_start,
        ap_done => gray2bgr_U0_ap_done,
        ap_continue => gray2bgr_U0_ap_continue,
        ap_idle => gray2bgr_U0_ap_idle,
        ap_ready => gray2bgr_U0_ap_ready,
        src_V_V_dout => addWeight_stream_V_V_dout,
        src_V_V_empty_n => addWeight_stream_V_V_empty_n,
        src_V_V_read => gray2bgr_U0_src_V_V_read,
        dst_V_V_din => gray2bgr_U0_dst_V_V_din,
        dst_V_V_full_n => out_stream_V_V_full_n,
        dst_V_V_write => gray2bgr_U0_dst_V_V_write);

    Stream2Mem_Batch_U0 : component Stream2Mem_Batch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Stream2Mem_Batch_U0_ap_start,
        ap_done => Stream2Mem_Batch_U0_ap_done,
        ap_continue => Stream2Mem_Batch_U0_ap_continue,
        ap_idle => Stream2Mem_Batch_U0_ap_idle,
        ap_ready => Stream2Mem_Batch_U0_ap_ready,
        in_V_V_dout => out_stream_V_V_dout,
        in_V_V_empty_n => out_stream_V_V_empty_n,
        in_V_V_read => Stream2Mem_Batch_U0_in_V_V_read,
        m_axi_out_V_AWVALID => Stream2Mem_Batch_U0_m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY => hostmem_2_AWREADY,
        m_axi_out_V_AWADDR => Stream2Mem_Batch_U0_m_axi_out_V_AWADDR,
        m_axi_out_V_AWID => Stream2Mem_Batch_U0_m_axi_out_V_AWID,
        m_axi_out_V_AWLEN => Stream2Mem_Batch_U0_m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE => Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST => Stream2Mem_Batch_U0_m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK => Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE => Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT => Stream2Mem_Batch_U0_m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS => Stream2Mem_Batch_U0_m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION => Stream2Mem_Batch_U0_m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER => Stream2Mem_Batch_U0_m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID => Stream2Mem_Batch_U0_m_axi_out_V_WVALID,
        m_axi_out_V_WREADY => hostmem_2_WREADY,
        m_axi_out_V_WDATA => Stream2Mem_Batch_U0_m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB => Stream2Mem_Batch_U0_m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST => Stream2Mem_Batch_U0_m_axi_out_V_WLAST,
        m_axi_out_V_WID => Stream2Mem_Batch_U0_m_axi_out_V_WID,
        m_axi_out_V_WUSER => Stream2Mem_Batch_U0_m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID => Stream2Mem_Batch_U0_m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY => ap_const_logic_0,
        m_axi_out_V_ARADDR => Stream2Mem_Batch_U0_m_axi_out_V_ARADDR,
        m_axi_out_V_ARID => Stream2Mem_Batch_U0_m_axi_out_V_ARID,
        m_axi_out_V_ARLEN => Stream2Mem_Batch_U0_m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE => Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST => Stream2Mem_Batch_U0_m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK => Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE => Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT => Stream2Mem_Batch_U0_m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS => Stream2Mem_Batch_U0_m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION => Stream2Mem_Batch_U0_m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER => Stream2Mem_Batch_U0_m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID => ap_const_logic_0,
        m_axi_out_V_RREADY => Stream2Mem_Batch_U0_m_axi_out_V_RREADY,
        m_axi_out_V_RDATA => ap_const_lv32_0,
        m_axi_out_V_RLAST => ap_const_logic_0,
        m_axi_out_V_RID => ap_const_lv1_0,
        m_axi_out_V_RUSER => ap_const_lv1_0,
        m_axi_out_V_RRESP => ap_const_lv2_0,
        m_axi_out_V_BVALID => hostmem_2_BVALID,
        m_axi_out_V_BREADY => Stream2Mem_Batch_U0_m_axi_out_V_BREADY,
        m_axi_out_V_BRESP => hostmem_2_BRESP,
        m_axi_out_V_BID => hostmem_2_BID,
        m_axi_out_V_BUSER => hostmem_2_BUSER,
        out_V_offset_dout => out_V_c_dout,
        out_V_offset_empty_n => out_V_c_empty_n,
        out_V_offset_read => Stream2Mem_Batch_U0_out_V_offset_read);

    in_stream_V_V_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Mem2Stream_Batch9_U0_out_V_V_din,
        if_full_n => in_stream_V_V_full_n,
        if_write => Mem2Stream_Batch9_U0_out_V_V_write,
        if_dout => in_stream_V_V_dout,
        if_empty_n => in_stream_V_V_empty_n,
        if_read => bgr2gray_U0_src_V_V_read);

    out_V_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Mem2Stream_Batch9_U0_out_V_out_din,
        if_full_n => out_V_c_full_n,
        if_write => Mem2Stream_Batch9_U0_out_V_out_write,
        if_dout => out_V_c_dout,
        if_empty_n => out_V_c_empty_n,
        if_read => Stream2Mem_Batch_U0_out_V_offset_read);

    gray_stream_V_V_U : component fifo_w8_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bgr2gray_U0_dst_V_V_din,
        if_full_n => gray_stream_V_V_full_n,
        if_write => bgr2gray_U0_dst_V_V_write,
        if_dout => gray_stream_V_V_dout,
        if_empty_n => gray_stream_V_V_empty_n,
        if_read => gaussianBlur_U0_src_V_V_read);

    gaussian_stream_x_V_s_U : component fifo_w8_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gaussianBlur_U0_dst_x_V_V_din,
        if_full_n => gaussian_stream_x_V_s_full_n,
        if_write => gaussianBlur_U0_dst_x_V_V_write,
        if_dout => gaussian_stream_x_V_s_dout,
        if_empty_n => gaussian_stream_x_V_s_empty_n,
        if_read => sobel_x_U0_src_V_V_read);

    gaussian_stream_y_V_s_U : component fifo_w8_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gaussianBlur_U0_dst_y_V_V_din,
        if_full_n => gaussian_stream_y_V_s_full_n,
        if_write => gaussianBlur_U0_dst_y_V_V_write,
        if_dout => gaussian_stream_y_V_s_dout,
        if_empty_n => gaussian_stream_y_V_s_empty_n,
        if_read => sobel_y_U0_src_V_V_read);

    sobel_stream_x_V_V_U : component fifo_w8_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_x_U0_dst_V_V_din,
        if_full_n => sobel_stream_x_V_V_full_n,
        if_write => sobel_x_U0_dst_V_V_write,
        if_dout => sobel_stream_x_V_V_dout,
        if_empty_n => sobel_stream_x_V_V_empty_n,
        if_read => addWeighted_U0_src_x_V_V_read);

    sobel_stream_y_V_V_U : component fifo_w8_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_y_U0_dst_V_V_din,
        if_full_n => sobel_stream_y_V_V_full_n,
        if_write => sobel_y_U0_dst_V_V_write,
        if_dout => sobel_stream_y_V_V_dout,
        if_empty_n => sobel_stream_y_V_V_empty_n,
        if_read => addWeighted_U0_src_y_V_V_read);

    addWeight_stream_V_V_U : component fifo_w8_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => addWeighted_U0_dst_V_V_din,
        if_full_n => addWeight_stream_V_V_full_n,
        if_write => addWeighted_U0_dst_V_V_write,
        if_dout => addWeight_stream_V_V_dout,
        if_empty_n => addWeight_stream_V_V_empty_n,
        if_read => gray2bgr_U0_src_V_V_read);

    out_stream_V_V_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gray2bgr_U0_dst_V_V_din,
        if_full_n => out_stream_V_V_full_n,
        if_write => gray2bgr_U0_dst_V_V_write,
        if_dout => out_stream_V_V_dout,
        if_empty_n => out_stream_V_V_empty_n,
        if_read => Stream2Mem_Batch_U0_in_V_V_read);

    start_for_bgr2grapcA_U : component start_for_bgr2grapcA
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_bgr2gray_U0_din,
        if_full_n => start_for_bgr2gray_U0_full_n,
        if_write => Mem2Stream_Batch9_U0_start_write,
        if_dout => start_for_bgr2gray_U0_dout,
        if_empty_n => start_for_bgr2gray_U0_empty_n,
        if_read => bgr2gray_U0_ap_ready);

    start_for_Stream2qcK_U : component start_for_Stream2qcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Stream2Mem_Batch_U0_din,
        if_full_n => start_for_Stream2Mem_Batch_U0_full_n,
        if_write => Mem2Stream_Batch9_U0_start_write,
        if_dout => start_for_Stream2Mem_Batch_U0_dout,
        if_empty_n => start_for_Stream2Mem_Batch_U0_empty_n,
        if_read => Stream2Mem_Batch_U0_ap_ready);

    start_for_gaussiarcU_U : component start_for_gaussiarcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gaussianBlur_U0_din,
        if_full_n => start_for_gaussianBlur_U0_full_n,
        if_write => bgr2gray_U0_start_write,
        if_dout => start_for_gaussianBlur_U0_dout,
        if_empty_n => start_for_gaussianBlur_U0_empty_n,
        if_read => gaussianBlur_U0_ap_ready);

    start_for_sobel_xsc4_U : component start_for_sobel_xsc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sobel_x_U0_din,
        if_full_n => start_for_sobel_x_U0_full_n,
        if_write => gaussianBlur_U0_start_write,
        if_dout => start_for_sobel_x_U0_dout,
        if_empty_n => start_for_sobel_x_U0_empty_n,
        if_read => sobel_x_U0_ap_ready);

    start_for_sobel_ytde_U : component start_for_sobel_ytde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sobel_y_U0_din,
        if_full_n => start_for_sobel_y_U0_full_n,
        if_write => gaussianBlur_U0_start_write,
        if_dout => start_for_sobel_y_U0_dout,
        if_empty_n => start_for_sobel_y_U0_empty_n,
        if_read => sobel_y_U0_ap_ready);

    start_for_addWeigudo_U : component start_for_addWeigudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_addWeighted_U0_din,
        if_full_n => start_for_addWeighted_U0_full_n,
        if_write => sobel_x_U0_start_write,
        if_dout => start_for_addWeighted_U0_dout,
        if_empty_n => start_for_addWeighted_U0_empty_n,
        if_read => addWeighted_U0_ap_ready);

    start_for_gray2bgvdy_U : component start_for_gray2bgvdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gray2bgr_U0_din,
        if_full_n => start_for_gray2bgr_U0_full_n,
        if_write => addWeighted_U0_start_write,
        if_dout => start_for_gray2bgr_U0_dout,
        if_empty_n => start_for_gray2bgr_U0_empty_n,
        if_read => gray2bgr_U0_ap_ready);




    Mem2Stream_Batch9_U0_ap_continue <= ap_const_logic_1;
    Mem2Stream_Batch9_U0_ap_start <= ap_start;
    Mem2Stream_Batch9_U0_start_full_n <= (start_for_bgr2gray_U0_full_n and start_for_Stream2Mem_Batch_U0_full_n);
    Stream2Mem_Batch_U0_ap_continue <= ap_const_logic_1;
    Stream2Mem_Batch_U0_ap_start <= start_for_Stream2Mem_Batch_U0_empty_n;
    Stream2Mem_Batch_U0_start_full_n <= ap_const_logic_1;
    Stream2Mem_Batch_U0_start_write <= ap_const_logic_0;
    addWeighted_U0_ap_continue <= ap_const_logic_1;
    addWeighted_U0_ap_start <= start_for_addWeighted_U0_empty_n;
    ap_done <= Stream2Mem_Batch_U0_ap_done;
    ap_idle <= (sobel_y_U0_ap_idle and sobel_x_U0_ap_idle and gray2bgr_U0_ap_idle and gaussianBlur_U0_ap_idle and bgr2gray_U0_ap_idle and addWeighted_U0_ap_idle and Stream2Mem_Batch_U0_ap_idle and Mem2Stream_Batch9_U0_ap_idle);
    ap_ready <= Mem2Stream_Batch9_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Stream2Mem_Batch_U0_ap_done;
    ap_sync_ready <= Mem2Stream_Batch9_U0_ap_ready;
    bgr2gray_U0_ap_continue <= ap_const_logic_1;
    bgr2gray_U0_ap_start <= start_for_bgr2gray_U0_empty_n;
    gaussianBlur_U0_ap_continue <= ap_const_logic_1;
    gaussianBlur_U0_ap_start <= start_for_gaussianBlur_U0_empty_n;
    gaussianBlur_U0_start_full_n <= (start_for_sobel_y_U0_full_n and start_for_sobel_x_U0_full_n);
    gray2bgr_U0_ap_continue <= ap_const_logic_1;
    gray2bgr_U0_ap_start <= start_for_gray2bgr_U0_empty_n;
    gray2bgr_U0_start_full_n <= ap_const_logic_1;
    gray2bgr_U0_start_write <= ap_const_logic_0;
    sobel_x_U0_ap_continue <= ap_const_logic_1;
    sobel_x_U0_ap_start <= start_for_sobel_x_U0_empty_n;
    sobel_y_U0_ap_continue <= ap_const_logic_1;
    sobel_y_U0_ap_start <= start_for_sobel_y_U0_empty_n;
    sobel_y_U0_start_full_n <= ap_const_logic_1;
    sobel_y_U0_start_write <= ap_const_logic_0;
    start_for_Stream2Mem_Batch_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_addWeighted_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_bgr2gray_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gaussianBlur_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gray2bgr_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sobel_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sobel_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
