-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_x is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_V_V_empty_n : IN STD_LOGIC;
    src_V_V_read : OUT STD_LOGIC;
    dst_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_V_V_full_n : IN STD_LOGIC;
    dst_V_V_write : OUT STD_LOGIC );
end;


architecture behav of sobel_x is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_40001 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv19_201 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_201 : STD_LOGIC_VECTOR (9 downto 0) := "1000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond6_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_19_reg_588 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_19_reg_588 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal countWait_reg_245 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond6_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond6_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_551 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_V_ad_reg_556 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ad_reg_561 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_572 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal idxCol_1_fu_383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_2_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_396_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal phitmp_reg_632 : STD_LOGIC_VECTOR (18 downto 0);
    signal lineBuff_val_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_lo_1_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_lo_2_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_4_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_V_lo_5_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_0_2_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal accumulator_V_0_2_reg_661 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_666 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_2_2_fu_497_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal accumulator_V_2_2_reg_671 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal out_V_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal countWait_3_fu_541_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal lineBuff_val_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_V_ce0 : STD_LOGIC;
    signal lineBuff_val_0_V_we0 : STD_LOGIC;
    signal lineBuff_val_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_V_ce1 : STD_LOGIC;
    signal lineBuff_val_0_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_V_ce0 : STD_LOGIC;
    signal lineBuff_val_1_V_we0 : STD_LOGIC;
    signal lineBuff_val_1_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_V_ce1 : STD_LOGIC;
    signal lineBuff_val_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ce0 : STD_LOGIC;
    signal lineBuff_val_2_V_we0 : STD_LOGIC;
    signal lineBuff_val_2_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_V_ce1 : STD_LOGIC;
    signal ap_phi_mux_col_assign_phi_fu_215_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_idxRow_phi_fu_226_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_pixConvolved_phi_fu_237_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_countWait_phi_fu_249_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal countWait_1_reg_257 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_12_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_0_2_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_527_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal tmp_14_fu_280_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_fu_296_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_3_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_4_0_2_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_4_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixConvolved_1_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_V_0_2_cast_fu_406_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_V_0_cast_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_422_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_V_2_1_2_fu_438_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal accumulator_V_0_2_ca_fu_455_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_429_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_1_fu_458_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal val_V_2_1_2_cast_fu_445_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_1_2_fu_474_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal val_V_27_cast_fu_449_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal accumulator_V_2_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal val_V_27_2_cast_fu_452_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_3_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_4_fu_520_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component gaussianBlur_linefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lineBuff_val_0_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_0_V_address0,
        ce0 => lineBuff_val_0_V_ce0,
        we0 => lineBuff_val_0_V_we0,
        d0 => lineBuff_val_1_V_q0,
        q0 => lineBuff_val_0_V_q0,
        address1 => lineBuff_val_0_V_address1,
        ce1 => lineBuff_val_0_V_ce1,
        q1 => lineBuff_val_0_V_q1);

    lineBuff_val_1_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_1_V_address0,
        ce0 => lineBuff_val_1_V_ce0,
        we0 => lineBuff_val_1_V_we0,
        d0 => lineBuff_val_2_V_q0,
        q0 => lineBuff_val_1_V_q0,
        address1 => lineBuff_val_1_V_address1,
        ce1 => lineBuff_val_1_V_ce1,
        q1 => lineBuff_val_1_V_q1);

    lineBuff_val_2_V_U : component gaussianBlur_linefYi
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuff_val_2_V_address0,
        ce0 => lineBuff_val_2_V_ce0,
        we0 => lineBuff_val_2_V_we0,
        d0 => src_V_V_dout,
        q0 => lineBuff_val_2_V_q0,
        address1 => lineBuff_val_2_V_address1,
        ce1 => lineBuff_val_2_V_ce1,
        q1 => lineBuff_val_2_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_211 <= idxCol_1_reg_622;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_211 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    countWait_1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                countWait_1_reg_257 <= ap_const_lv10_0;
            elsif ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                countWait_1_reg_257 <= countWait_3_fu_541_p2;
            end if; 
        end if;
    end process;

    countWait_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                countWait_reg_245 <= phitmp_reg_632;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                countWait_reg_245 <= ap_const_lv19_1;
            end if; 
        end if;
    end process;

    idxRow_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                idxRow_reg_222 <= idxRow_1_reg_583;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idxRow_reg_222 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pixConvolved_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                pixConvolved_reg_233 <= pixConvolved_2_reg_627;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pixConvolved_reg_233 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_566 = ap_const_lv1_1) and (exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                accumulator_V_0_2_reg_661 <= accumulator_V_0_2_fu_410_p2;
                tmp_10_reg_666 <= tmp_10_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_or_cond_reg_566 = ap_const_lv1_1) and (ap_reg_pp0_iter1_exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                accumulator_V_2_2_reg_671 <= accumulator_V_2_2_fu_497_p2;
                out_V_reg_676 <= out_V_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond6_reg_547 <= exitcond6_reg_547;
                ap_reg_pp0_iter1_or_cond_reg_566 <= or_cond_reg_566;
                ap_reg_pp0_iter1_tmp_19_reg_588 <= tmp_19_reg_588;
                exitcond6_reg_547 <= exitcond6_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                idxCol_1_reg_622 <= idxCol_1_fu_383_p3;
                phitmp_reg_632 <= phitmp_fu_396_p2;
                pixConvolved_2_reg_627 <= pixConvolved_2_fu_389_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxCol_reg_578 <= idxCol_fu_324_p2;
                lineBuff_val_1_V_ad_reg_556 <= tmp_s_fu_274_p1(9 - 1 downto 0);
                lineBuff_val_2_V_ad_reg_561 <= tmp_s_fu_274_p1(9 - 1 downto 0);
                or_cond_reg_566 <= or_cond_fu_312_p2;
                tmp_18_reg_572 <= tmp_18_fu_318_p2;
                tmp_19_reg_588 <= tmp_19_fu_344_p2;
                    tmp_s_reg_551(31 downto 0) <= tmp_s_fu_274_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_268_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idxRow_1_reg_583 <= idxRow_1_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_566 = ap_const_lv1_1) and (exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lineBuff_val_1_V_lo_1_reg_637 <= lineBuff_val_1_V_q0;
                lineBuff_val_1_V_lo_2_reg_643 <= lineBuff_val_1_V_q1;
                lineBuff_val_2_V_lo_4_reg_649 <= lineBuff_val_2_V_q0;
                lineBuff_val_2_V_lo_5_reg_655 <= lineBuff_val_2_V_q1;
            end if;
        end if;
    end process;
    tmp_s_reg_551(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dst_V_V_full_n, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, exitcond_fu_535_p2, exitcond6_fu_268_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond6_fu_268_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond6_fu_268_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
        accumulator_V_0_2_ca_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(accumulator_V_0_2_reg_661),11));

    accumulator_V_0_2_fu_410_p2 <= std_logic_vector(unsigned(val_V_0_2_cast_fu_406_p1) - unsigned(val_V_0_cast_fu_402_p1));
    accumulator_V_1_2_fu_474_p2 <= std_logic_vector(unsigned(accumulator_V_1_fu_458_p2) + unsigned(val_V_2_1_2_cast_fu_445_p1));
    accumulator_V_1_fu_458_p2 <= std_logic_vector(signed(accumulator_V_0_2_ca_fu_455_p1) - signed(p_shl_cast_fu_429_p1));
    accumulator_V_2_2_fu_497_p2 <= std_logic_vector(unsigned(accumulator_V_2_fu_486_p2) + unsigned(val_V_27_2_cast_fu_452_p1));
    accumulator_V_2_fu_486_p2 <= std_logic_vector(unsigned(accumulator_V_1_2_fu_474_p2) - unsigned(val_V_27_cast_fu_449_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(src_V_V_empty_n, ap_enable_reg_pp0_iter0, exitcond6_reg_547)
    begin
                ap_block_pp0_stage1_11001 <= ((exitcond6_reg_547 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(src_V_V_empty_n, ap_enable_reg_pp0_iter0, exitcond6_reg_547)
    begin
                ap_block_pp0_stage1_subdone <= ((exitcond6_reg_547 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(dst_V_V_full_n, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_19_reg_588)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(dst_V_V_full_n, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_19_reg_588)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(dst_V_V_full_n, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_19_reg_588)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(src_V_V_empty_n, exitcond6_reg_547)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((exitcond6_reg_547 = ap_const_lv1_0) and (src_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage2_iter1_assign_proc : process(dst_V_V_full_n, ap_reg_pp0_iter1_tmp_19_reg_588)
    begin
                ap_block_state7_pp0_stage2_iter1 <= ((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (dst_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(dst_V_V_full_n, exitcond_fu_535_p2)
    begin
                ap_block_state9 <= ((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond6_fu_268_p2)
    begin
        if ((exitcond6_fu_268_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, dst_V_V_full_n, ap_CS_fsm_state9, exitcond_fu_535_p2)
    begin
        if ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_215_p4_assign_proc : process(exitcond6_reg_547, ap_enable_reg_pp0_iter1, col_assign_reg_211, ap_CS_fsm_pp0_stage0, idxCol_1_reg_622, ap_block_pp0_stage0)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_col_assign_phi_fu_215_p4 <= idxCol_1_reg_622;
        else 
            ap_phi_mux_col_assign_phi_fu_215_p4 <= col_assign_reg_211;
        end if; 
    end process;


    ap_phi_mux_countWait_phi_fu_249_p4_assign_proc : process(exitcond6_reg_547, ap_enable_reg_pp0_iter1, countWait_reg_245, ap_CS_fsm_pp0_stage0, phitmp_reg_632, ap_block_pp0_stage0)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_countWait_phi_fu_249_p4 <= phitmp_reg_632;
        else 
            ap_phi_mux_countWait_phi_fu_249_p4 <= countWait_reg_245;
        end if; 
    end process;


    ap_phi_mux_idxRow_phi_fu_226_p4_assign_proc : process(exitcond6_reg_547, ap_enable_reg_pp0_iter1, idxRow_reg_222, ap_CS_fsm_pp0_stage0, idxRow_1_reg_583, ap_block_pp0_stage0)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_idxRow_phi_fu_226_p4 <= idxRow_1_reg_583;
        else 
            ap_phi_mux_idxRow_phi_fu_226_p4 <= idxRow_reg_222;
        end if; 
    end process;


    ap_phi_mux_pixConvolved_phi_fu_237_p4_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, pixConvolved_reg_233, ap_reg_pp0_iter1_exitcond6_reg_547, pixConvolved_2_reg_627)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_reg_pp0_iter1_exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_pixConvolved_phi_fu_237_p4 <= pixConvolved_2_reg_627;
        else 
            ap_phi_mux_pixConvolved_phi_fu_237_p4 <= pixConvolved_reg_233;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    col_assign_4_0_2_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(ap_phi_mux_pixConvolved_phi_fu_237_p4));
    countWait_3_fu_541_p2 <= std_logic_vector(unsigned(countWait_1_reg_257) + unsigned(ap_const_lv10_1));

    dst_V_V_blk_n_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, ap_reg_pp0_iter1_tmp_19_reg_588, ap_CS_fsm_state9, exitcond_fu_535_p2)
    begin
        if ((((exitcond_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dst_V_V_blk_n <= dst_V_V_full_n;
        else 
            dst_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_V_V_din_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_19_reg_588, ap_CS_fsm_state9, exitcond_fu_535_p2, tmp_V_fu_527_p3, ap_block_pp0_stage2_01001)
    begin
        if ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dst_V_V_din <= ap_const_lv8_0;
        elsif (((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_V_V_din <= tmp_V_fu_527_p3;
        else 
            dst_V_V_din <= "XXXXXXXX";
        end if; 
    end process;


    dst_V_V_write_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_19_reg_588, ap_CS_fsm_state9, exitcond_fu_535_p2, ap_block_pp0_stage2_11001)
    begin
        if (((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_reg_pp0_iter1_tmp_19_reg_588 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            dst_V_V_write <= ap_const_logic_1;
        else 
            dst_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_268_p2 <= "1" when (ap_phi_mux_countWait_phi_fu_249_p4 = ap_const_lv19_40001) else "0";
    exitcond_fu_535_p2 <= "1" when (countWait_1_reg_257 = ap_const_lv10_201) else "0";
    icmp2_fu_306_p2 <= "1" when (signed(tmp_17_fu_296_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_290_p2 <= "1" when (signed(tmp_14_fu_280_p4) > signed(ap_const_lv31_0)) else "0";
    idxCol_1_fu_383_p3 <= 
        idxCol_reg_578 when (tmp_18_reg_572(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_col_assign_phi_fu_215_p4));
    idxRow_1_fu_336_p3 <= 
        ap_phi_mux_idxRow_phi_fu_226_p4 when (tmp_18_fu_318_p2(0) = '1') else 
        idxRow_3_fu_330_p2;
    idxRow_3_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_idxRow_phi_fu_226_p4));

    internal_ap_ready_assign_proc : process(dst_V_V_full_n, ap_CS_fsm_state9, exitcond_fu_535_p2)
    begin
        if ((not(((exitcond_fu_535_p2 = ap_const_lv1_0) and (dst_V_V_full_n = ap_const_logic_0))) and (exitcond_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_s_reg_551, tmp_12_fu_350_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_0_V_address0 <= tmp_12_fu_350_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_0_V_address0 <= tmp_s_reg_551(9 - 1 downto 0);
            else 
                lineBuff_val_0_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    lineBuff_val_0_V_address1 <= tmp_40_0_2_fu_369_p1(9 - 1 downto 0);

    lineBuff_val_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            lineBuff_val_0_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            lineBuff_val_0_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond6_reg_547, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_0_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, tmp_s_fu_274_p1, lineBuff_val_1_V_ad_reg_556, ap_block_pp0_stage0, tmp_12_fu_350_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_1_V_address0 <= tmp_12_fu_350_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_1_V_address0 <= lineBuff_val_1_V_ad_reg_556;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_1_V_address0 <= tmp_s_fu_274_p1(9 - 1 downto 0);
            else 
                lineBuff_val_1_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    lineBuff_val_1_V_address1 <= tmp_40_0_2_fu_369_p1(9 - 1 downto 0);

    lineBuff_val_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            lineBuff_val_1_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            lineBuff_val_1_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond6_reg_547, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_1_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage0, tmp_s_fu_274_p1, lineBuff_val_2_V_ad_reg_561, ap_block_pp0_stage0, tmp_12_fu_350_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                lineBuff_val_2_V_address0 <= tmp_12_fu_350_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lineBuff_val_2_V_address0 <= lineBuff_val_2_V_ad_reg_561;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lineBuff_val_2_V_address0 <= tmp_s_fu_274_p1(9 - 1 downto 0);
            else 
                lineBuff_val_2_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    lineBuff_val_2_V_address1 <= tmp_40_0_2_fu_369_p1(9 - 1 downto 0);

    lineBuff_val_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            lineBuff_val_2_V_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            lineBuff_val_2_V_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond6_reg_547, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_2_V_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_312_p2 <= (icmp_fu_290_p2 and icmp2_fu_306_p2);
    out_V_3_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(out_V_reg_676));
    out_V_4_fu_520_p3 <= 
        out_V_3_fu_515_p2 when (tmp_21_fu_508_p3(0) = '1') else 
        out_V_reg_676;
    out_V_fu_503_p2 <= std_logic_vector(unsigned(lineBuff_val_2_V_lo_5_reg_655) + unsigned(tmp_16_fu_492_p2));
    p_shl_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_422_p3),11));
    p_shl_fu_422_p3 <= (lineBuff_val_1_V_lo_1_reg_637 & ap_const_lv1_0);
    phitmp_fu_396_p2 <= std_logic_vector(unsigned(countWait_reg_245) + unsigned(ap_const_lv19_1));
    pixConvolved_1_fu_376_p3 <= 
        pixConvolved_4_fu_357_p2 when (or_cond_reg_566(0) = '1') else 
        ap_phi_mux_pixConvolved_phi_fu_237_p4;
    pixConvolved_2_fu_389_p3 <= 
        pixConvolved_1_fu_376_p3 when (tmp_18_reg_572(0) = '1') else 
        ap_const_lv32_0;
    pixConvolved_4_fu_357_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_pixConvolved_phi_fu_237_p4));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    src_V_V_blk_n_assign_proc : process(src_V_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond6_reg_547)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_V_V_blk_n <= src_V_V_empty_n;
        else 
            src_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond6_reg_547, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond6_reg_547 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            src_V_V_read <= ap_const_logic_1;
        else 
            src_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_416_p2 <= std_logic_vector(unsigned(lineBuff_val_0_V_q1) - unsigned(lineBuff_val_0_V_q0));
    tmp_11_fu_464_p2 <= std_logic_vector(unsigned(tmp_10_reg_666) - unsigned(tmp_13_fu_433_p2));
    tmp_12_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_pixConvolved_phi_fu_237_p4),64));
    tmp_13_fu_433_p2 <= std_logic_vector(shift_left(unsigned(lineBuff_val_1_V_lo_1_reg_637),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_14_fu_280_p4 <= ap_phi_mux_idxRow_phi_fu_226_p4(31 downto 1);
    tmp_15_fu_480_p2 <= std_logic_vector(unsigned(tmp_20_fu_469_p2) + unsigned(tmp_11_fu_464_p2));
    tmp_16_fu_492_p2 <= std_logic_vector(unsigned(tmp_15_fu_480_p2) - unsigned(lineBuff_val_2_V_lo_4_reg_649));
    tmp_17_fu_296_p4 <= ap_phi_mux_col_assign_phi_fu_215_p4(31 downto 1);
    tmp_18_fu_318_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_215_p4) < signed(ap_const_lv32_1FF)) else "0";
    tmp_19_fu_344_p2 <= "1" when (unsigned(ap_phi_mux_countWait_phi_fu_249_p4) > unsigned(ap_const_lv19_201)) else "0";
    tmp_20_fu_469_p2 <= std_logic_vector(shift_left(unsigned(lineBuff_val_1_V_lo_2_reg_643),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_21_fu_508_p3 <= accumulator_V_2_2_reg_671(10 downto 10);
    tmp_40_0_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_4_0_2_fu_363_p2),64));
    tmp_V_fu_527_p3 <= 
        out_V_4_fu_520_p3 when (ap_reg_pp0_iter1_or_cond_reg_566(0) = '1') else 
        ap_const_lv8_0;
    tmp_s_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_215_p4),64));
    val_V_0_2_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_V_q1),9));
    val_V_0_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_0_V_q0),9));
    val_V_27_2_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_V_lo_5_reg_655),11));
    val_V_27_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lineBuff_val_2_V_lo_4_reg_649),11));
    val_V_2_1_2_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_2_1_2_fu_438_p3),11));
    val_V_2_1_2_fu_438_p3 <= (lineBuff_val_1_V_lo_2_reg_643 & ap_const_lv1_0);
end behav;
